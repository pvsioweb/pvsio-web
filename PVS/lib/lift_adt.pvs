%%% ADT file generated from NIL

lift_adt[T: TYPE]: THEORY
 BEGIN

  lift: TYPE

  bottom?, up?: [lift -> boolean]

  down: [(up?) -> T]

  bottom: (bottom?)

  up: [T -> (up?)]

  lift_ord: [lift -> upto(1)]

  lift_ord_defaxiom: AXIOM
    lift_ord(bottom) = 0 AND (FORALL (down: T): lift_ord(up(down)) = 1);

  ord(x: lift): [lift -> upto(1)] =
      CASES x OF bottom: 0, up(up1_var): 1 ENDCASES

  lift_bottom_extensionality: AXIOM
    FORALL (bottom?_var: (bottom?), bottom?_var2: (bottom?)):
      bottom?_var = bottom?_var2;

  lift_up_extensionality: AXIOM
    FORALL (up?_var: (up?), up?_var2: (up?)):
      down(up?_var) = down(up?_var2) IMPLIES up?_var = up?_var2;

  lift_up_eta: AXIOM FORALL (up?_var: (up?)): up(down(up?_var)) = up?_var;

  lift_down_up: AXIOM FORALL (up1_var: T): down(up(up1_var)) = up1_var;

  lift_inclusive: AXIOM
    FORALL (lift_var: lift): bottom?(lift_var) OR up?(lift_var);

  lift_induction: AXIOM
    FORALL (p: [lift -> boolean]):
      (p(bottom) AND (FORALL (up1_var: T): p(up(up1_var)))) IMPLIES
       (FORALL (lift_var: lift): p(lift_var));

  every(p: PRED[T])(a: lift):  boolean =
      CASES a OF bottom: TRUE, up(up1_var): p(up1_var) ENDCASES;

  every(p: PRED[T], a: lift):  boolean =
      CASES a OF bottom: TRUE, up(up1_var): p(up1_var) ENDCASES;

  some(p: PRED[T])(a: lift):  boolean =
      CASES a OF bottom: FALSE, up(up1_var): p(up1_var) ENDCASES;

  some(p: PRED[T], a: lift):  boolean =
      CASES a OF bottom: FALSE, up(up1_var): p(up1_var) ENDCASES;

  subterm(x: lift, y: lift):  boolean = x = y;

  <<:  (strict_well_founded?[lift]) = LAMBDA (x, y: lift): FALSE;

  lift_well_founded: AXIOM strict_well_founded?[lift](<<);

  reduce_nat(bottom?_fun: nat, up?_fun: [T -> nat]):  [lift -> nat] =
      LAMBDA (lift_adtvar: lift):
        LET red: [lift -> nat] = reduce_nat(bottom?_fun, up?_fun) IN
          CASES lift_adtvar
            OF bottom: bottom?_fun, up(up1_var): up?_fun(up1_var)
            ENDCASES;

  REDUCE_nat(bottom?_fun: [lift -> nat], up?_fun: [[T, lift] -> nat]):
        [lift -> nat] =
      LAMBDA (lift_adtvar: lift):
        LET red: [lift -> nat] = REDUCE_nat(bottom?_fun, up?_fun) IN
          CASES lift_adtvar
            OF bottom: bottom?_fun(lift_adtvar),
               up(up1_var): up?_fun(up1_var, lift_adtvar)
            ENDCASES;

  reduce_ordinal(bottom?_fun: ordinal, up?_fun: [T -> ordinal]):
        [lift -> ordinal] =
      LAMBDA (lift_adtvar: lift):
        LET red: [lift -> ordinal] = reduce_ordinal(bottom?_fun, up?_fun)
          IN
          CASES lift_adtvar
            OF bottom: bottom?_fun, up(up1_var): up?_fun(up1_var)
            ENDCASES;

  REDUCE_ordinal(bottom?_fun: [lift -> ordinal],
                 up?_fun: [[T, lift] -> ordinal]):
        [lift -> ordinal] =
      LAMBDA (lift_adtvar: lift):
        LET red: [lift -> ordinal] = REDUCE_ordinal(bottom?_fun, up?_fun)
          IN
          CASES lift_adtvar
            OF bottom: bottom?_fun(lift_adtvar),
               up(up1_var): up?_fun(up1_var, lift_adtvar)
            ENDCASES;
 END lift_adt

lift_adt_map[T: TYPE, T1: TYPE]: THEORY
 BEGIN

  IMPORTING lift_adt

  map(f: [T -> T1])(a: lift[T]):  lift[T1] =
      CASES a OF bottom: bottom, up(up1_var): up(f(up1_var)) ENDCASES;

  map(f: [T -> T1], a: lift[T]):  lift[T1] =
      CASES a OF bottom: bottom, up(up1_var): up(f(up1_var)) ENDCASES;

  every(R: [[T, T1] -> boolean])(x: lift[T], y: lift[T1]):  boolean =
      bottom?(x) AND bottom?(y) OR
       up?(x) AND up?(y) AND R(down(x), down(y));
 END lift_adt_map

lift_adt_reduce[T: TYPE, range: TYPE]: THEORY
 BEGIN

  IMPORTING lift_adt[T]

  reduce(bottom?_fun: range, up?_fun: [T -> range]):  [lift[T] -> range] =
      LAMBDA (lift_adtvar: lift[T]):
        LET red: [lift[T] -> range] = reduce(bottom?_fun, up?_fun) IN
          CASES lift_adtvar
            OF bottom: bottom?_fun, up(up1_var): up?_fun(up1_var)
            ENDCASES;

  REDUCE(bottom?_fun: [lift[T] -> range],
         up?_fun: [[T, lift[T]] -> range]):
        [lift[T] -> range] =
      LAMBDA (lift_adtvar: lift[T]):
        LET red: [lift[T] -> range] = REDUCE(bottom?_fun, up?_fun) IN
          CASES lift_adtvar
            OF bottom: bottom?_fun(lift_adtvar),
               up(up1_var): up?_fun(up1_var, lift_adtvar)
            ENDCASES;
 END lift_adt_reduce