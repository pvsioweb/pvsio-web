%%% ADT file generated from NIL

union_adt[T1, T2: TYPE]: THEORY
 BEGIN

  union: TYPE

  inl?, inr?: [union -> boolean]

  left: [(inl?) -> T1]

  right: [(inr?) -> T2]

  inl: [T1 -> (inl?)]

  inr: [T2 -> (inr?)]

  union_ord: [union -> upto(1)]

  union_ord_defaxiom: AXIOM
    (FORALL (left: T1): union_ord(inl(left)) = 0) AND
     (FORALL (right: T2): union_ord(inr(right)) = 1);

  ord(x: union): [union -> upto(1)] =
      CASES x OF inl(inl1_var): 0, inr(inr1_var): 1 ENDCASES

  union_inl_extensionality: AXIOM
    FORALL (inl?_var: (inl?), inl?_var2: (inl?)):
      left(inl?_var) = left(inl?_var2) IMPLIES inl?_var = inl?_var2;

  union_inl_eta: AXIOM
    FORALL (inl?_var: (inl?)): inl(left(inl?_var)) = inl?_var;

  union_inr_extensionality: AXIOM
    FORALL (inr?_var: (inr?), inr?_var2: (inr?)):
      right(inr?_var) = right(inr?_var2) IMPLIES inr?_var = inr?_var2;

  union_inr_eta: AXIOM
    FORALL (inr?_var: (inr?)): inr(right(inr?_var)) = inr?_var;

  union_left_inl: AXIOM
    FORALL (inl1_var: T1): left(inl(inl1_var)) = inl1_var;

  union_right_inr: AXIOM
    FORALL (inr1_var: T2): right(inr(inr1_var)) = inr1_var;

  union_inclusive: AXIOM
    FORALL (union_var: union): inl?(union_var) OR inr?(union_var);

  union_induction: AXIOM
    FORALL (p: [union -> boolean]):
      ((FORALL (inl1_var: T1): p(inl(inl1_var))) AND
        (FORALL (inr1_var: T2): p(inr(inr1_var))))
       IMPLIES (FORALL (union_var: union): p(union_var));

  every(p1: PRED[T1], p2: PRED[T2])(a: union):  boolean =
      CASES a OF inl(inl1_var): p1(inl1_var), inr(inr1_var): p2(inr1_var)
        ENDCASES;

  every(p1: PRED[T1], p2: PRED[T2], a: union):  boolean =
      CASES a OF inl(inl1_var): p1(inl1_var), inr(inr1_var): p2(inr1_var)
        ENDCASES;

  some(p1: PRED[T1], p2: PRED[T2])(a: union):  boolean =
      CASES a OF inl(inl1_var): p1(inl1_var), inr(inr1_var): p2(inr1_var)
        ENDCASES;

  some(p1: PRED[T1], p2: PRED[T2], a: union):  boolean =
      CASES a OF inl(inl1_var): p1(inl1_var), inr(inr1_var): p2(inr1_var)
        ENDCASES;

  subterm(x: union, y: union):  boolean = x = y;

  <<:  (strict_well_founded?[union]) = LAMBDA (x, y: union): FALSE;

  union_well_founded: AXIOM strict_well_founded?[union](<<);

  reduce_nat(inl?_fun: [T1 -> nat], inr?_fun: [T2 -> nat]):
        [union -> nat] =
      LAMBDA (union_adtvar: union):
        LET red: [union -> nat] = reduce_nat(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var),
               inr(inr1_var): inr?_fun(inr1_var)
            ENDCASES;

  REDUCE_nat(inl?_fun: [[T1, union] -> nat],
             inr?_fun: [[T2, union] -> nat]):
        [union -> nat] =
      LAMBDA (union_adtvar: union):
        LET red: [union -> nat] = REDUCE_nat(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var, union_adtvar),
               inr(inr1_var): inr?_fun(inr1_var, union_adtvar)
            ENDCASES;

  reduce_ordinal(inl?_fun: [T1 -> ordinal], inr?_fun: [T2 -> ordinal]):
        [union -> ordinal] =
      LAMBDA (union_adtvar: union):
        LET red: [union -> ordinal] = reduce_ordinal(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var),
               inr(inr1_var): inr?_fun(inr1_var)
            ENDCASES;

  REDUCE_ordinal(inl?_fun: [[T1, union] -> ordinal],
                 inr?_fun: [[T2, union] -> ordinal]):
        [union -> ordinal] =
      LAMBDA (union_adtvar: union):
        LET red: [union -> ordinal] = REDUCE_ordinal(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var, union_adtvar),
               inr(inr1_var): inr?_fun(inr1_var, union_adtvar)
            ENDCASES;
 END union_adt

union_adt_map[T1: TYPE, T2: TYPE, T11: TYPE, T21: TYPE]: THEORY
 BEGIN

  IMPORTING union_adt

  map(f1: [T1 -> T11], f2: [T2 -> T21])(a: union[T1, T2]):
        union[T11, T21] =
      CASES a
        OF inl(inl1_var): inl(f1(inl1_var)),
           inr(inr1_var): inr(f2(inr1_var))
        ENDCASES;

  map(f1: [T1 -> T11], f2: [T2 -> T21], a: union[T1, T2]):
        union[T11, T21] =
      CASES a
        OF inl(inl1_var): inl(f1(inl1_var)),
           inr(inr1_var): inr(f2(inr1_var))
        ENDCASES;

  every(R1: [[T1, T11] -> boolean], R2: [[T2, T21] -> boolean])
       (x: union[T1, T2], y: union[T11, T21]):
        boolean =
      inl?(x) AND inl?(y) AND R1(left(x), left(y)) OR
       inr?(x) AND inr?(y) AND R2(right(x), right(y));
 END union_adt_map

union_adt_reduce[T1: TYPE, T2: TYPE, range: TYPE]: THEORY
 BEGIN

  IMPORTING union_adt[T1, T2]

  reduce(inl?_fun: [T1 -> range], inr?_fun: [T2 -> range]):
        [union[T1, T2] -> range] =
      LAMBDA (union_adtvar: union[T1, T2]):
        LET red: [union[T1, T2] -> range] = reduce(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var),
               inr(inr1_var): inr?_fun(inr1_var)
            ENDCASES;

  REDUCE(inl?_fun: [[T1, union[T1, T2]] -> range],
         inr?_fun: [[T2, union[T1, T2]] -> range]):
        [union[T1, T2] -> range] =
      LAMBDA (union_adtvar: union[T1, T2]):
        LET red: [union[T1, T2] -> range] = REDUCE(inl?_fun, inr?_fun) IN
          CASES union_adtvar
            OF inl(inl1_var): inl?_fun(inl1_var, union_adtvar),
               inr(inr1_var): inr?_fun(inr1_var, union_adtvar)
            ENDCASES;
 END union_adt_reduce