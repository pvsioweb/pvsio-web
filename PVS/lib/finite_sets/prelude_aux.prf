(prelude_aux
 (rest_emptyset_TCC1 0
  (rest_emptyset_TCC1-1 nil 3338228202 ("" (subtype-tcc) nil nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (T formal-type-decl nil prelude_aux nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (rest_emptyset 0
  (rest_emptyset-1 nil 3338228215
   ("" (skosimp)
    (("" (use "rest_empty_lem[T]")
      (("" (assert)
        (("" (split)
          (("1" (expand* "singleton" "extend")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (expand* "empty?" "member") (("2" (inst?) nil nil))
            nil)
           ("3" (rewrite "emptyset_is_empty?[T]") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((rest_empty_lem formula-decl nil sets_lemmas nil)
    (T formal-type-decl nil prelude_aux nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (extend const-decl "R" extend nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (rest const-decl "set" sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak)))

