(finite_cross
 (is_finite_cross 0
  (is_finite_cross-1 nil 3338227528
   ("" (expand "is_finite_type")
    (("" (skosimp*)
      ((""
        (inst + "N!1 * N!2 + N!2"
         "LAMBDA (x:T1, y: T2): g!1(x) * N!2 + g!2(y)")
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1"
              (case "g!1(x1!1`1) = g!1(x2!1`1) AND g!2(x1!1`2) = g!2(x2!1`2)")
              (("1" (flatten)
                (("1" (inst?)
                  (("1" (inst?)
                    (("1" (assert) (("1" (decompose-equality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 -2 -1)
                (("2"
                  (typepred "g!1(x1!1`1)" "g!2(x1!1`2)" "g!1(x2!1`1)"
                   "g!2(x2!1`2)")
                  (("2" (assert)
                    (("2" (use "unique_division")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem!)
          (("2" (typepred "g!1(x!1)" "g!2(y!1)")
            (("2" (assert)
              (("2" (use "both_sides_times_pos_lt1")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (injective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unique_division formula-decl nil euclidean_division nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T1 formal-type-decl nil finite_cross nil)
    (T2 formal-type-decl nil finite_cross nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N!2 skolem-const-decl "nat" finite_cross nil)
    (below type-eq-decl nil nat_types nil)
    (g!2 skolem-const-decl "[T2 -> below[N!2]]" finite_cross nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (N!1 skolem-const-decl "nat" finite_cross nil)
    (g!1 skolem-const-decl "[T1 -> below[N!1]]" finite_cross nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (is_finite_type const-decl "bool" finite_sets nil))
   shostak)))

