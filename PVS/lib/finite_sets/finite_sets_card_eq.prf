(finite_sets_card_eq
 (card_injection 0
  (card_injection-1 nil 3338229205
   ("" (skosimp*)
    (("" (rewrite "card_def")
      (("" (rewrite "Card_injection") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((card_def formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T1 formal-type-decl nil finite_sets_card_eq nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Card_injection formula-decl nil finite_sets nil))
   shostak))
 (card_surjection 0
  (card_surjection-1 nil 3338229232
   ("" (skosimp*)
    (("" (rewrite "card_def")
      (("" (rewrite "Card_surjection") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((card_def formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T1 formal-type-decl nil finite_sets_card_eq nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Card_surjection formula-decl nil finite_sets nil))
   shostak))
 (injection_and_cardinal 0
  (injection_and_cardinal-1 nil 3338229248
   ("" (skosimp*)
    (("" (name-replace "n" "card(F!1)" :hide? nil)
      (("" (rewrite "card_bij")
        (("" (expand "bijective?")
          (("" (skosimp)
            (("" (rewrite "card_injection")
              (("" (inst + "f!2 o f!1")
                (("" (rewrite "composition_injective") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T2 formal-type-decl nil finite_sets_card_eq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (bijective? const-decl "bool" functions nil)
    (T1 formal-type-decl nil finite_sets_card_eq nil)
    (card_injection formula-decl nil finite_sets_card_eq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (composition_injective formula-decl nil func_composition nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (card_bij formula-decl nil finite_sets nil))
   shostak))
 (surjection_and_cardinal 0
  (surjection_and_cardinal-1 nil 3338229296
   ("" (skosimp*)
    (("" (name-replace "n" "card(F!1)" :hide? nil)
      (("" (rewrite "card_bij")
        (("" (expand "bijective?")
          (("" (skosimp)
            (("" (rewrite "card_surjection")
              (("" (inst + "f!2 o f!1")
                (("" (rewrite "composition_surjective") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T2 formal-type-decl nil finite_sets_card_eq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (bijective? const-decl "bool" functions nil)
    (T1 formal-type-decl nil finite_sets_card_eq nil)
    (card_surjection formula-decl nil finite_sets_card_eq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (composition_surjective formula-decl nil func_composition nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (card_bij formula-decl nil finite_sets nil))
   shostak))
 (card_eq_bij 0
  (card_eq_bij-1 nil 3338229331
   ("" (skolem!)
    (("" (use "empty_card[T2]")
      (("" (ground)
        (("1" (replace -3)
          (("1" (rewrite "empty_card[T1]" :dir rl)
            (("1" (delete -3)
              (("1"
                (inst +
                 "LAMBDA (x : (E!1)) : epsilon! (y : (F!1)) : TRUE")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (replace -3)
          (("2" (rewrite "empty_card[T1]" :dir rl)
            (("2" (skolem!)
              (("2" (delete -1 -3)
                (("2" (grind)
                  (("2" (inst - "f!1(x!1)") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (delete 2)
          (("3" (name-replace "n" "card(F!1)" :hide? nil)
            (("3" (rewrite "card_bij")
              (("3" (rewrite "card_bij")
                (("3" (skosimp*)
                  (("3" (inst + "inverse(f!1) o f!2")
                    (("1" (rewrite "composition_bijective")
                      (("1" (rewrite "bij_inv_is_bij")
                        (("1" (delete -1 -2 2 3)
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (delete -)
                        (("2" (expand* "empty?" "member")
                          (("2" (skolem!) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand* "empty?" "member")
                      (("2" (skolem!) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (name-replace "n" "card(F!1)" :hide? nil)
          (("4" (delete 2)
            (("4" (rewrite "card_bij")
              (("4" (rewrite "card_bij")
                (("4" (skosimp*)
                  (("4" (inst + "f!1 o f!2")
                    (("4" (rewrite "composition_bijective") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_card formula-decl nil finite_sets nil)
    (T2 formal-type-decl nil finite_sets_card_eq nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_bij formula-decl nil finite_sets nil)
    (x!1 skolem-const-decl "T2" finite_sets_card_eq nil)
    (composition_bijective formula-decl nil func_composition nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (inverse const-decl "D" function_inverse nil)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (E!1 skolem-const-decl "finite_set[T1]" finite_sets_card_eq nil)
    (F!1 skolem-const-decl "finite_set[T2]" finite_sets_card_eq nil)
    (TRUE const-decl "bool" booleans nil)
    (T1 formal-type-decl nil finite_sets_card_eq nil))
   shostak)))

