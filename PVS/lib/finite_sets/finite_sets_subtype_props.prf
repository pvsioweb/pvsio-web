(finite_sets_subtype_props
 (only_subtype_elements 0
  (only_subtype_elements-1 nil 3412399264 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-type-decl nil finite_sets_subtype_props nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T2 formal-type-decl nil finite_sets_subtype_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (difference const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil))
   shostak))
 (same_card_inj_bij 0
  (same_card_inj_bij-2 nil 3412312291
   ("" (skosimp*)
    (("" (lemma "card_injective_image[(A!1),(B!1)]")
      (("" (inst - "f!1" "A!1")
        (("" (expand "bijective?")
          (("" (ground)
            (("" (lemma "same_card_subset_extend[T2,(B!1)]")
              ((""
                (inst - "image(f!1, restrict[T1, (A!1), boolean](A!1))"
                 "B!1")
                (("" (ground)
                  (("1" (hide -2 -3)
                    (("1" (expand "surjective?")
                      (("1" (skosimp*)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (expand "extend")
                              (("1"
                                (expand "image")
                                (("1"
                                  (skosimp*)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil)
                   ("3" (replace -1)
                    (("3" (hide -1 2)
                      (("3" (use "card_restrict_subtype[T1, (A!1)]")
                        (("3" (assert) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T2 formal-type-decl nil finite_sets_subtype_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil finite_sets_subtype_props nil)
    (card_injective_image formula-decl nil function_image_aux nil)
    (bijective? const-decl "bool" functions nil)
    (same_card_subset_extend formula-decl nil card_tricks nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (surjective? const-decl "bool" functions nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (card_restrict_subtype formula-decl nil card_tricks nil)
    (image const-decl "set[R]" function_image nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (restrict const-decl "R" restrict nil)
    (A!1 skolem-const-decl "finite_set[T1]" finite_sets_subtype_props
     nil)
    (B!1 skolem-const-decl "finite_set[T2]" finite_sets_subtype_props
     nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(A!1) -> (B!1)]" finite_sets_subtype_props
     nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil))
   nil)
  (same_card_inj_bij-1 nil 3412312183
   (";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
    (skosimp*)
    ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
      (lemma "card_injective_image[(A!1),(B!1)]")
      ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
        (inst - "f!1" "A!1")
        ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
          (expand "bijective?")
          ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
            (ground)
            ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
              (lemma "same_card_subset_extend[T2,(B!1)]")
              ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
                (inst - "image(f!1, restrict[T1, (A!1), boolean](A!1))"
                 "B!1")
                ((";;; Proof same_card_inj_bij-1 for formula card_subtypes.same_card_inj_bij"
                  (ground)
                  (("1" (hide -2 -3)
                    (("1" (expand "surjective?")
                      (("1" (skosimp*)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (expand "extend")
                              (("1"
                                (expand "image")
                                (("1"
                                  (skosimp*)
                                  (("1" (grind) nil)))))))))))))))))
                   ("2" (grind) nil)
                   ("3" (replace -1)
                    (("3" (hide -1 2)
                      (("3" (use "card_restrict_subtype[T1, (A!1)]")
                        (("3" (rewrite "only_subtype_elements")
                          (("3" (assert) nil))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)))

