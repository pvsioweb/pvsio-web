(fs_constructors
 (fs_TCC1 0
  (fs_TCC1-1 nil 3434967873
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1" (inst + "1" "LAMBDA (i:below(1)): a1")
                (("1" (expand "surjective?")
                  (("1" (skosimp*) (("1" (inst + "0") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (inst - "a1")
          (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (fs_TCC2 0
  (fs_TCC2-3 nil 3434968322
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "2" "LAMBDA (i:below(2)):
                                IF i = 0 THEN a1
                                ELSE a2
                                ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst + "1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil)
  (fs_TCC2-2 nil 3434967910
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "4" "LAMBDA (i:below(4)):
                        IF i = 0 THEN a1
                        ELSIF i = 1 THEN a2
                        ELSIF i = 2 THEN a3
                        ELSE a4
                        ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst + "1") (("2" (assert) nil nil))
                          nil)
                         ("3" (inst + "2") (("3" (assert) nil nil))
                          nil)
                         ("4" (inst + "3") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (fs_TCC2-1 nil 3434967873 ("" (subtype-tcc) nil nil) nil nil))
 (fs_TCC3 0
  (fs_TCC3-2 nil 3434968268
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "3" "LAMBDA (i:below(3)):
                            IF i = 0 THEN a1
                            ELSIF i = 1 THEN a2
                            ELSE a3
                            ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst + "1") (("2" (assert) nil nil))
                          nil)
                         ("3" (inst + "2") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil)
  (fs_TCC3-1 nil 3434968216 ("" (subtype-tcc) nil nil) nil nil))
 (fs_TCC4 0
  (fs_TCC4-2 nil 3434968231
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "4" "LAMBDA (i:below(4)):
                            IF i = 0 THEN a1
                            ELSIF i = 1 THEN a2
                            ELSIF i = 2 THEN a3
                            ELSE a4
                            ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst + "1") (("2" (assert) nil nil))
                          nil)
                         ("3" (inst + "2") (("3" (assert) nil nil))
                          nil)
                         ("4" (inst + "3") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil)
  (fs_TCC4-1 nil 3434968216 ("" (subtype-tcc) nil nil) nil nil))
 (fs_TCC5 0
  (fs_TCC5-3 nil 3434968451
   ("" (skeep)
    (("" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "5" "LAMBDA (i:below(5)):
                                IF i = 0 THEN a1
                                ELSIF i = 1 THEN a2
                                ELSIF i = 2 THEN a3
                                ELSIF i = 3 THEN a4
                                ELSE a5
                                ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst + "1") (("2" (assert) nil nil))
                          nil)
                         ("3" (inst + "2") (("3" (assert) nil nil))
                          nil)
                         ("4" (inst + "3") (("4" (assert) nil nil))
                          nil)
                         ("5" (inst + "4") (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (T formal-type-decl nil fs_constructors nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil)
  (fs_TCC5-2 nil 3434968429
   (";;; Proof fs_TCC4-2 for formula fs_constructors.fs_TCC4" (skeep)
    ((";;; Proof fs_TCC4-2 for formula fs_constructors.fs_TCC4" (prop)
      (("1" (lemma "is_finite_surj[T]")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1"
                (inst + "4" "LAMBDA (i:below(4)):
                                IF i = 0 THEN a1
                                ELSIF i = 1 THEN a2
                                ELSIF i = 2 THEN a3
                                ELSE a4
                                ENDIF")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (split -1)
                        (("1" (inst + "0") (("1" (assert) nil)))
                         ("2" (inst + "1") (("2" (assert) nil)))
                         ("3" (inst + "2") (("3" (assert) nil)))
                         ("4" (inst + "3")
                          (("4" (assert) nil)))))))))))))))))))))
       ("2" (expand "empty?")
        (("2" (expand "member") (("2" (inst - "a1") nil))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (fs_TCC5-1 nil 3434968408 ("" (subtype-tcc) nil nil) nil nil)))

