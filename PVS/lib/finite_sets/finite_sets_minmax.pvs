finite_sets_minmax[T: TYPE, <= : (total_order?[T])]: THEORY
BEGIN

  IMPORTING  finite_sets_inductions[T]

  fsmin(x,y:T): T = IF x <= y THEN x ELSE y ENDIF
  fsmax(x,y:T): T = IF x <= y THEN y ELSE x ENDIF

  a,x,y: VAR T
  SS: VAR non_empty_finite_set

  minrec(SS): RECURSIVE T = 
                IF empty?(rest(SS)) THEN choose(SS)
                ELSE fsmin(choose(SS),minrec(rest(SS)))
                ENDIF
              MEASURE (LAMBDA SS: card(SS))

  maxrec(SS): RECURSIVE T = 
                IF empty?(rest(SS)) THEN choose(SS)
                ELSE fsmax(choose(SS),maxrec(rest(SS)))
                ENDIF
              MEASURE (LAMBDA SS: card(SS))

  lt_reflexive:     LEMMA FORALL (x: T): <=(x, x)
  lt_transitive:    LEMMA FORALL (x,y,z:T): <=(x, y) & <=(y, z) => <=(x, z)
  lt_total:         LEMMA FORALL (x,y:T) : x <= y OR y <= x
  lt_antisymmetric: LEMMA FORALL (x,y: T): <=(x, y) & <=(y, x) => x = y

  min(SS): {a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}
  max(SS): {a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}
 

  min_lem: LEMMA (min(SS) = a IFF
                  SS(a) AND (FORALL (x: (SS)): a <= x))

  max_lem: LEMMA (max(SS) = a IFF
                  SS(a) AND (FORALL (x: (SS)): x <= a))

  A,B:   VAR non_empty_finite_set

  min_union: LEMMA min(A) = x AND min(B) = y IMPLIES
                      min(union(A,B)) = fsmin(x,y)

  max_union: LEMMA max(A) = x AND max(B) = y IMPLIES
                      max(union(A,B)) = fsmax(x,y)


END finite_sets_minmax
