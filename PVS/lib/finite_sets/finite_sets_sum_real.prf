(finite_sets_sum_real
 (IMP_finite_sets_sum_TCC1 0
  (IMP_finite_sets_sum_TCC1-1 nil 3338293772
   ("" (assuming-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil))
   nil))
 (IMP_finite_sets_sum_TCC2 0
  (IMP_finite_sets_sum_TCC2-1 nil 3338293772
   ("" (assuming-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (associative? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (sum_const 0
  (sum_const-1 nil 3338293808
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!)
      (("1" (rewrite "sum_emptyset")
        (("1" (lemma "card_emptyset") (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sum" +)
        (("2" (inst?)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (use "card_rest") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card_rest formula-decl nil finite_sets nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_1_is_card 0
  (sum_1_is_card-1 nil 3338293922
   ("" (skolem!) (("" (use "sum_const") (("" (assert) nil nil)) nil))
    nil)
   ((sum_const formula-decl nil finite_sets_sum_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (sum_mult 0
  (sum_mult-1 nil 3338293973
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!)
      (("1" (rewrite "sum_emptyset")
        (("1" (lemma "sum_emptyset")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sum" +)
        (("2" (inst?) (("2" (replace -1) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_empty? 0
  (sum_empty?-1 nil 3338294103
   ("" (skosimp)
    (("" (rewrite "emptyset_is_empty?[T]")
      (("" (use "sum_emptyset[T, real, 0, +]") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil))
   shostak))
 (sum_emptyset_rew 0
  (sum_emptyset_rew-1 nil 3338294141
   ("" (skosimp)
    (("" (use "sum_emptyset[T, real, 0, +]") (("" (assert) nil nil))
      nil))
    nil)
   ((sum_emptyset formula-decl nil finite_sets_sum nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil))
   shostak))
 (sum_singleton_rew 0
  (sum_singleton_rew-1 nil 3338294160
   ("" (skosimp)
    (("" (rewrite "card_one")
      (("" (skolem!)
        (("" (replace -1)
          (("" (rewrite "sum_singleton[T, real, 0, +]")
            (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((card_one formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_sum_real nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_singleton formula-decl nil finite_sets_sum nil))
   shostak))
 (sum_remove_rew 0
  (sum_remove_rew-1 nil 3338294211
   ("" (skolem!)
    (("" (use "sum_remove[T, real, 0, +]")
      (("" (replace -1 + rl)
        (("" (hide -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sum_remove formula-decl nil finite_sets_sum nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_rest_rew_TCC1 0
  (sum_rest_rew_TCC1-1 nil 3338293772 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (sum_rest_rew 0
  (sum_rest_rew-1 nil 3338294278
   ("" (skosimp) (("" (use "sum_rest") (("" (assert) nil nil)) nil))
    nil)
   ((sum_rest formula-decl nil finite_sets_sum nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sum_union_rew 0
  (sum_union_rew-1 nil 3338294308
   ("" (skolem!) (("" (use "sum_union") (("" (assert) nil nil)) nil))
    nil)
   ((sum_union formula-decl nil finite_sets_sum nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_union application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_intersection2 application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sum_eq_funs 0
  (sum_eq_funs-1 nil 3338294327
   ("" (skosimp) (("" (rewrite "sum_f_g") nil nil)) nil)
   ((sum_f_g formula-decl nil finite_sets_sum nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (sum_particular_gen 0
  (sum_particular_gen-1 nil 3338294347
   ("" (auto-rewrite "member")
    (("" (induct "S" :name "finite_set_induction_rest[T]")
      (("1" (skolem!)
        (("1" (rewrite "sum_emptyset")
          (("1" (rewrite "sum_emptyset")
            (("1" (expand "emptyset") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "sum" +)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -2 :hide? t)
                    (("1" (case "rest(SS!1)(t!1)")
                      (("1" (expand "rest")
                        (("1" (replace -2 * rl)
                          (("1" (expand "remove")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?)
                (("2" (case "SS!1(t!1)")
                  (("1" (assert)
                    (("1" (replace -2 :hide? t)
                      (("1" (expand* "rest" "remove")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1 :hide? t)
                    (("2" (expand* "rest" "remove")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (emptyset const-decl "set" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (rest const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (sum_bound 0
  (sum_bound-1 nil 3338294789
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skosimp)
      (("1" (rewrite "sum_emptyset")
        (("1" (rewrite "card_emptyset") (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sum" +)
        (("2" (inst - "N!1" "f!1")
          (("2" (split)
            (("1" (inst - "choose(SS!1)")
              (("1" (rewrite "card_rest") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skolem-typepred)
                (("2" (inst - "t!1")
                  (("2" (grind :exclude "choose") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SS!1 skolem-const-decl "non_empty_finite_set[T]"
     finite_sets_sum_real nil)
    (t!1 skolem-const-decl "(rest(SS!1))" finite_sets_sum_real nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_order 0
  (sum_order-1 nil 3338294915
   (""
    (induct-and-simplify "S" :name "finite_set_induction_rest" :exclude
     ("rest" "choose"))
    nil nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_nonneg 0
  (sum_nonneg-1 nil 3338294965
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skosimp)
      (("1" (rewrite "sum_emptyset") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sum" +)
        (("2" (inst?)
          (("2" (split)
            (("1" (inst - "choose(SS!1)") (("1" (assert) nil nil)) nil)
             ("2" (hide 2)
              (("2" (skolem-typepred)
                (("2" (inst?)
                  (("2" (use "rest_member[T]")
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SS!1 skolem-const-decl "non_empty_finite_set[T]"
     finite_sets_sum_real nil)
    (t!1 skolem-const-decl "(rest(SS!1))" finite_sets_sum_real nil)
    (member const-decl "bool" sets nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_pos 0
  (sum_pos-1 nil 3338295061
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!) nil nil)
     ("2" (skosimp*)
      (("2" (expand "sum" +)
        (("2" (inst?)
          (("2" (split)
            (("1" (inst - "choose(SS!1)") (("1" (assert) nil nil)) nil)
             ("2" (hide 2)
              (("2" (replace -1)
                (("2" (rewrite "sum_emptyset")
                  (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skolem-typepred)
                (("3" (inst?)
                  (("3" (use "rest_member[T]")
                    (("3" (expand "member") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SS!1 skolem-const-decl "non_empty_finite_set[T]"
     finite_sets_sum_real nil)
    (t!1 skolem-const-decl "(rest(SS!1))" finite_sets_sum_real nil)
    (member const-decl "bool" sets nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (rest const-decl "set" sets nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_TCC1 0
  (sum_TCC1-1 nil 3338293772
   ("" (auto-rewrite-theory "rationals")
    (("" (auto-rewrite-theory "integers")
      (("" (induct "A" :name "finite_set_induction_rest")
        (("1" (typepred "A!1") (("1" (propax) nil nil)) nil)
         ("2" (skosimp*)
          (("2" (hide 2)
            (("2" (rewrite "emptyset_is_empty?[T]") nil nil)) nil))
          nil)
         ("3" (skosimp*)
          (("3" (assert)
            (("3" (split)
              (("1" (inst?)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sum" +)
                      (("1" (assert)
                        (("1" (typepred "f!1(choose(SS!1))")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "sum" +)
                (("2" (typepred "f!1(choose(SS!1))")
                  (("2" (case-replace "rest(SS!1) = emptyset")
                    (("1" (hide -1)
                      (("1" (rewrite "sum_emptyset")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide -1 -2 2 3)
                      (("2" (rewrite "emptyset_is_empty?[T]") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rest const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3338293772
   ("" (auto-rewrite-theory "rationals")
    (("" (auto-rewrite-theory "integers")
      (("" (induct-and-simplify "x1" :name "finite_set_induction_rest")
        ((""
          (induct-and-simplify "A" :name "finite_set_induction_rest")
          nil nil))
        nil))
      nil))
    nil)
   ((closed_plus formula-decl nil integers nil)
    (closed_plus formula-decl nil rationals nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (rest const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (sum_TCC3 0
  (sum_TCC3-1 nil 3338293772
   ("" (skolem!)
    (("" (use "sum_nonneg")
      (("" (assert) (("" (skolem!) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sum_nonneg formula-decl nil finite_sets_sum_real nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "int" finite_sets_sum_real nil))
   nil))
 (sum_subset 0
  (sum_subset-1 nil 3338299884
   ("" (skosimp)
    (("" (case "B!1 = union(A!1,difference(B!1,A!1))")
      (("1" (replace -1 +)
        (("1" (hide -1)
          (("1" (use "sum_union")
            (("1"
              (case-replace
               "sum(intersection(A!1, difference(B!1, A!1)), fnr!1) = 0")
              (("1" (hide -1)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (lemma "sum_nonneg")
                        (("1" (inst - "difference(B!1, A!1)" "fnr!1")
                          (("1" (assert)
                            (("1" (skolem!) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2"
                  (case "intersection(A!1, difference(B!1, A!1)) = emptyset")
                  (("1" (replace -1)
                    (("1" (rewrite "sum_emptyset") nil nil)) nil)
                   ("2" (hide 2) (("2" (grind-with-ext) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind-with-ext) nil nil)) nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (finite_union application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_difference application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (intersection const-decl "set" sets nil)
    (sum def-decl "R" finite_sets_sum nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_intersection2 application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     finite_sets_sum_real nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_nonneg formula-decl nil finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (sum_emptyset formula-decl nil finite_sets_sum nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_union formula-decl nil finite_sets_sum nil))
   shostak))
 (sum_order_sub 0
  (sum_order_sub-1 nil 3338300063
   ("" (skosimp)
    (("" (lemma "sum_subset")
      (("" (inst - "A!1" "B!1" "fnr!1")
        (("" (assert)
          (("" (lemma "sum_order")
            (("" (inst - "B!1" "fnr!1" "gnr!1") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_subset formula-decl nil finite_sets_sum_real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     finite_sets_sum_real nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sum_order formula-decl nil finite_sets_sum_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil))
   shostak))
 (sum_0_nat 0
  (sum_0_nat-1 nil 3338300152
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!) nil nil)
     ("2" (skosimp* t)
      (("2" (expand "sum" -4)
        (("2" (inst?)
          (("2" (typepred "sum(rest(SS!1), gn!1)")
            (("2" (assert)
              (("2" (split)
                (("1" (assert)
                  (("1" (use "rest_emptyset[T]")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (use "choose_rest_or[T]")
                  (("2" (expand "member")
                    (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (rest_emptyset formula-decl nil prelude_aux nil)
    (rest const-decl "set" sets nil)
    (nil application-judgement "nat" finite_sets_sum_real nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_is_null 0
  (sum_is_null-1 nil 3338300358
   ("" (skosimp)
    (("" (forward-chain "sum_0_nat")
      (("1" (hide -2 1)
        (("1" (replace -1)
          (("1" (expand "emptyset") (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (inst?) nil nil))
      nil))
    nil)
   ((sum_0_nat formula-decl nil finite_sets_sum_real nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (emptyset const-decl "set" sets nil)
    (S!1 skolem-const-decl "finite_set[T]" finite_sets_sum_real nil)
    (t!1 skolem-const-decl "T" finite_sets_sum_real nil))
   shostak))
 (sum_0_int 0
  (sum_0_int-1 nil 3338300490
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!) nil nil)
     ("2" (skosimp* t)
      (("2" (expand "sum" -4)
        (("2" (inst?)
          (("2" (typepred "sum(rest(SS!1), gi!1)")
            (("2" (assert)
              (("2" (split)
                (("1" (use "rest_emptyset[T]") (("1" (assert) nil nil))
                  nil)
                 ("2" (use "choose_rest_or[T]")
                  (("2" (expand "member") (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (t!1 skolem-const-decl "(SS!1)" finite_sets_sum_real nil)
    (SS!1 skolem-const-decl "non_empty_finite_set[T]"
     finite_sets_sum_real nil)
    (member const-decl "bool" sets nil)
    (rest_emptyset formula-decl nil prelude_aux nil)
    (rest const-decl "set" sets nil)
    (nil application-judgement "nat" finite_sets_sum_real nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_0_non_neg 0
  (sum_0_non_neg-1 nil 3338300582
   ("" (induct "S" :name "finite_set_induction_rest")
    (("1" (skolem!) nil nil)
     ("2" (skosimp*)
      (("2" (expand "sum" -2)
        (("2" (inst?)
          (("2" (use "sum_nonneg")
            (("2"
              (case-replace "FORALL (t: (rest(SS!1))): f!1(t) >= 0")
              (("1" (case-replace "f!1(choose(SS!1)) = 0")
                (("1" (assert)
                  (("1" (split)
                    (("1" (case "t!1 = choose(SS!1)")
                      (("1" (assert) nil nil)
                       ("2" (hide -2 -3 -4 -5 -6 3)
                        (("2" (use "rest_emptyset[T]")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "choose_rest_or[T]")
                      (("2" (expand "member")
                        (("2" (inst?)
                          (("2" (inst - "t!1")
                            (("2" (assert)
                              (("2" (inst - "t!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst -5 "choose(SS!1)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide -1 -2 -3 3)
                (("2" (skolem-typepred)
                  (("2" (inst - "t!2")
                    (("2" (use "rest_member[T]")
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (rest_emptyset formula-decl nil prelude_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (t!2 skolem-const-decl "(rest(SS!1))" finite_sets_sum_real nil)
    (SS!1 skolem-const-decl "non_empty_finite_set[T]"
     finite_sets_sum_real nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_sum_real nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest const-decl "set" sets nil)
    (sum_nonneg formula-decl nil finite_sets_sum_real nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (emptyset const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (sum def-decl "R" finite_sets_sum nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_TCC4 0
  (sum_TCC4-1 nil 3338293772
   ("" (skolem!)
    (("" (use "sum_nonneg")
      (("" (assert) (("" (skolem!) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sum_nonneg formula-decl nil finite_sets_sum_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC5 0
  (sum_TCC5-1 nil 3338293772 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil finite_sets_sum_real nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nonneg_real" finite_sets_sum_real nil)
    (nil application-judgement "nat" finite_sets_sum_real nil)
    (nil application-judgement "posreal" finite_sets_sum_real nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil))
   nil)))

