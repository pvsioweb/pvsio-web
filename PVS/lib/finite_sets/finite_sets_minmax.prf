(finite_sets_minmax
 (minrec_TCC1 0
  (minrec_TCC1-1 nil 3338232942
   ("" (skosimp)
    (("" (rewrite "card_rest") (("" (assert) nil nil)) nil)) nil)
   ((card_rest formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_minmax nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (lt_reflexive 0
  (lt_reflexive-1 nil 3338233032
   ("" (skolem!)
    (("" (typepred "<=")
      ((""
        (expand* "total_order?" "partial_order?" "preorder?"
         "reflexive?")
        (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   shostak))
 (lt_transitive 0
  (lt_transitive-1 nil 3338233109
   ("" (skosimp)
    (("" (typepred "<=")
      ((""
        (expand* "total_order?" "partial_order?" "preorder?"
         "transitive?")
        (("" (flatten)
          (("" (inst - "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   shostak))
 (lt_total 0
  (lt_total-1 nil 3338233147
   ("" (skosimp)
    (("" (typepred "<=")
      (("" (expand* "total_order?" "partial_order?" "dichotomous?")
        (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil))
   shostak))
 (lt_antisymmetric 0
  (lt_antisymmetric-1 nil 3338233178
   ("" (skosimp)
    (("" (typepred "<=")
      (("" (expand* "total_order?" "partial_order?" "antisymmetric?")
        (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   shostak))
 (min_TCC1 0
  (min_TCC1-1 nil 3338232942
   ("" (inst + "LAMBDA SS: minrec(SS)")
    (("" (induct "SS" + "finite_set_induction_rest")
      (("1" (typepred "SS!1") (("1" (propax) nil nil)) nil)
       ("2" (typepred "SS!1") (("2" (propax) nil nil)) nil)
       ("3" (auto-rewrite-theory "sets[T]") (("3" (assert) nil nil))
        nil)
       ("4" (skosimp)
        (("4" (expand "minrec" +)
          (("4" (split +)
            (("1" (assert) nil nil)
             ("2" (flatten)
              (("2" (auto-rewrite-theory "sets[T]")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (expand "fsmin")
                      (("2" (assert)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (use "epsilon_ax[T]")
                              (("1"
                                (assert)
                                (("1" (inst + "x!1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (lift-if)
                (("3" (split +)
                  (("1" (hide -2)
                    (("1" (flatten)
                      (("1" (lemma "choose_rest_or[T]")
                        (("1" (inst?)
                          (("1" (expand "member")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand* "empty?" "member")
                                    (("1" (inst?) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite "lt_reflexive")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "fsmin")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (lemma "choose_rest_or[T]")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (inst - "SS!1" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1 -3 -4 2 3)
                                              (("1"
                                                (lemma "lt_transitive")
                                                (("1"
                                                  (inst
                                                   -
                                                   "choose(SS!1)"
                                                   "minrec(rest(SS!1))"
                                                   "x!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (rewrite "lt_reflexive")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "x!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case-replace "x!1 = choose(SS!1)")
                                    (("1"
                                      (use "lt_total")
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (hide 3 4 5 6)
                                      (("2"
                                        (use "choose_rest_or[T]")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" finite_sets_minmax
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_minmax nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lt_reflexive formula-decl nil finite_sets_minmax nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (lt_transitive formula-decl nil finite_sets_minmax nil)
    (lt_total formula-decl nil finite_sets_minmax nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_minmax nil)
    (choose_is_epsilon formula-decl nil sets nil)
    (rest const-decl "set" sets nil) (remove const-decl "set" sets nil)
    (fsmin const-decl "T" finite_sets_minmax nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (minrec def-decl "T" finite_sets_minmax nil)
    (<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_minmax nil))
   nil))
 (max_TCC1 0
  (max_TCC1-1 nil 3338232942
   ("" (inst + "LAMBDA SS: maxrec(SS)")
    (("" (induct "SS" + "finite_set_induction_rest")
      (("1" (typepred "SS!1") (("1" (propax) nil nil)) nil)
       ("2" (typepred "SS!1") (("2" (propax) nil nil)) nil)
       ("3" (auto-rewrite-theory "sets[T]") (("3" (assert) nil nil))
        nil)
       ("4" (skosimp)
        (("4" (expand "maxrec" +)
          (("4" (split +)
            (("1" (assert) nil nil)
             ("2" (flatten)
              (("2" (auto-rewrite-theory "sets[T]")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (expand "fsmax")
                      (("2" (assert)
                        (("2" (split +)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (use "epsilon_ax[T]")
                              (("2"
                                (assert)
                                (("2" (inst + "x!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (lift-if)
                (("3" (split +)
                  (("1" (hide -2)
                    (("1" (flatten)
                      (("1" (case-replace "x!1 = choose(SS!1)")
                        (("1" (rewrite "lt_reflexive") nil nil)
                         ("2" (hide 2)
                          (("2" (lemma "choose_rest_or[T]")
                            (("2" (expand "member")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand* "empty?" "member")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "fsmax")
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -4)
                                  (("1"
                                    (lemma "choose_rest_or[T]")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (inst - "SS!1" "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -2)
                                            (("1"
                                              (inst - "x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide -2 -3 3 4)
                                        (("1"
                                          (lemma "lt_total")
                                          (("1"
                                            (inst
                                             -
                                             "maxrec(rest(SS!1))"
                                             "choose(SS!1)")
                                            (("1"
                                              (split)
                                              (("1"
                                                (lemma "lt_transitive")
                                                (("1"
                                                  (inst
                                                   -
                                                   "x!1"
                                                   "maxrec(rest(SS!1))"
                                                   "choose(SS!1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "choose_rest_or[T]")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (rewrite
                                                   "lt_reflexive")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" finite_sets_minmax
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_minmax nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (lt_reflexive formula-decl nil finite_sets_minmax nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (lt_total formula-decl nil finite_sets_minmax nil)
    (lt_transitive formula-decl nil finite_sets_minmax nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_minmax nil)
    (choose_is_epsilon formula-decl nil sets nil)
    (rest const-decl "set" sets nil) (remove const-decl "set" sets nil)
    (fsmax const-decl "T" finite_sets_minmax nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (maxrec def-decl "T" finite_sets_minmax nil)
    (<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_minmax nil))
   nil))
 (min_lem 0
  (min_lem-1 nil 3338234119
   ("" (skolem!)
    (("" (typepred "min(SS!1)")
      (("" (ground)
        (("1" (skolem-typepred)
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (inst - "min(SS!1)")
          (("2" (inst - "a!1")
            (("2" (assert) (("2" (rewrite "lt_antisymmetric") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax nil)
    (<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lt_antisymmetric formula-decl nil finite_sets_minmax nil))
   shostak))
 (max_lem 0
  (max_lem-1 nil 3338234270
   ("" (skolem!)
    (("" (typepred "max(SS!1)")
      (("" (ground)
        (("1" (skolem-typepred)
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (inst - "max(SS!1)")
          (("2" (inst - "a!1")
            (("2" (assert) (("2" (rewrite "lt_antisymmetric") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax nil)
    (<= formal-const-decl "(total_order?[T])" finite_sets_minmax nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil finite_sets_minmax nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lt_antisymmetric formula-decl nil finite_sets_minmax nil))
   shostak))
 (min_union 0
  (min_union-1 nil 3338234326
   ("" (skosimp)
    (("" (auto-rewrite "member" "union")
      (("" (lemma "min_lem")
        (("" (inst-cp - "A!1" "x!1")
          (("" (inst-cp - "B!1" "y!1")
            (("" (inst - "union(A!1, B!1)" "fsmin(x!1, y!1)")
              (("" (assert)
                (("" (prop)
                  (("1" (expand "fsmin") (("1" (ground) nil nil)) nil)
                   ("2" (skolem-typepred)
                    (("2" (expand* "union" "fsmin" "member")
                      (("2" (lift-if)
                        (("2" (split +)
                          (("1" (flatten)
                            (("1" (split)
                              (("1" (inst -4 "x!2") nil nil)
                               ("2"
                                (inst - "x!2")
                                (("2"
                                  (hide -1 -4 -5 -6)
                                  (("2"
                                    (lemma "lt_transitive")
                                    (("2"
                                      (inst - "x!1" "y!1" "x!2")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (inst -3 "x!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 -2 -4 -5)
                                    (("1"
                                      (lemma "lt_transitive")
                                      (("1"
                                        (inst - "x!1" "x!2" "y!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "lt_total")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst - "x!2") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil finite_sets_minmax nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set[T]" finite_sets_minmax nil)
    (union const-decl "set" sets nil)
    (fsmin const-decl "T" finite_sets_minmax nil)
    (x!2 skolem-const-decl "(union(A!1, B!1))" finite_sets_minmax nil)
    (B!1 skolem-const-decl "non_empty_finite_set[T]" finite_sets_minmax
     nil)
    (A!1 skolem-const-decl "non_empty_finite_set[T]" finite_sets_minmax
     nil)
    (lt_transitive formula-decl nil finite_sets_minmax nil)
    (lt_total formula-decl nil finite_sets_minmax nil)
    (member const-decl "bool" sets nil)
    (min_lem formula-decl nil finite_sets_minmax nil))
   shostak))
 (max_union 0
  (max_union-1 nil 3338234725
   ("" (skosimp)
    (("" (auto-rewrite "member" "union")
      (("" (lemma "max_lem")
        (("" (inst-cp - "A!1" "x!1")
          (("" (inst-cp - "B!1" "y!1")
            (("" (inst - "union(A!1, B!1)" "fsmax(x!1, y!1)")
              (("" (assert)
                (("" (prop)
                  (("1" (expand "fsmax") (("1" (ground) nil nil)) nil)
                   ("2" (skolem-typepred)
                    (("2" (expand* "union" "fsmax" "member")
                      (("2" (lift-if)
                        (("2" (split +)
                          (("1" (flatten)
                            (("1" (split)
                              (("1"
                                (inst -4 "x!2")
                                (("1"
                                  (lemma "lt_transitive")
                                  (("1"
                                    (inst - "x!2" "x!1" "y!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst - "x!2") nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1" (inst -3 "x!2") nil nil)
                               ("2"
                                (inst - "x!2")
                                (("2"
                                  (lemma "lt_transitive")
                                  (("2"
                                    (inst - "x!2" "y!1" "x!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "lt_total")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil finite_sets_minmax nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set[T]" finite_sets_minmax nil)
    (union const-decl "set" sets nil)
    (fsmax const-decl "T" finite_sets_minmax nil)
    (lt_transitive formula-decl nil finite_sets_minmax nil)
    (x!2 skolem-const-decl "(union(A!1, B!1))" finite_sets_minmax nil)
    (B!1 skolem-const-decl "non_empty_finite_set[T]" finite_sets_minmax
     nil)
    (A!1 skolem-const-decl "non_empty_finite_set[T]" finite_sets_minmax
     nil)
    (lt_total formula-decl nil finite_sets_minmax nil)
    (member const-decl "bool" sets nil)
    (max_lem formula-decl nil finite_sets_minmax nil))
   shostak)))

