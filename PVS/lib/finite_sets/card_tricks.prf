(card_tricks
 (subtype_full? 0
  (subtype_full?-1 nil 3412313700 ("" (grind) nil nil)
   ((restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (full? const-decl "bool" sets nil))
   shostak))
 (subtype_fullset 0
  (subtype_fullset-1 nil 3412313811 ("" (grind-with-ext) nil nil)
   ((set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (S formal-subtype-decl nil card_tricks nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_tricks nil)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (extend_restrict 0
  (extend_restrict-1 nil 3412215242 ("" (grind-with-ext) nil nil)
   ((S_pred const-decl "[T -> boolean]" card_tricks nil)
    (S formal-subtype-decl nil card_tricks nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (restrict const-decl "R" restrict nil)
    (set type-eq-decl nil sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_tricks nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (difference const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (union_extend_restrict 0
  (union_extend_restrict-1 nil 3412307978 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_tricks nil)
    (member const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (S formal-subtype-decl nil card_tricks nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil))
   shostak))
 (disjoint_extend_restrict 0
  (disjoint_extend_restrict-1 nil 3412398369 ("" (grind) nil nil)
   ((non_subtype_elements const-decl "set[T]" card_tricks nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (difference const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil))
   shostak))
 (card_restrict_subtype 0
  (card_restrict_subtype-1 nil 3412149513
   ("" (skosimp*)
    (("" (use "card_extend[T,S]")
      (("" (replace -1 :dir rl)
        (("" (use "extend_restrict") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_extend formula-decl nil extend_set_props nil)
    (T formal-type-decl nil card_tricks nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (S formal-subtype-decl nil card_tricks nil)
    (restrict const-decl "R" restrict nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (extend_restrict formula-decl nil card_tricks nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil))
   shostak))
 (same_card_subset_extend 0
  (same_card_subset_extend-1 nil 3412269556
   ("" (skosimp*)
    (("" (use "card_extend[T,S]")
      (("" (use "same_card_subset[T]") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((card_extend formula-decl nil extend_set_props nil)
    (T formal-type-decl nil card_tricks nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (S formal-subtype-decl nil card_tricks nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (same_card_subset formula-decl nil finite_sets nil))
   nil))
 (card_restrict_plus_TCC1 0
  (card_restrict_plus_TCC1-1 nil 3412313295 ("" (subtype-tcc) nil nil)
   ((non_subtype_elements const-decl "set[T]" card_tricks nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil))
   nil))
 (card_restrict_plus 0
  (card_restrict_plus-2 "" 3412398850
   ("" (skosimp*)
    (("" (use "card_extend[T,S]")
      (("" (replace -1 :dir rl)
        (("" (use "card_disj_union[T]")
          (("" (rewrite "disjoint_extend_restrict")
            (("" (rewrite "union_extend_restrict")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_extend formula-decl nil extend_set_props nil)
    (T formal-type-decl nil card_tricks nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (S formal-subtype-decl nil card_tricks nil)
    (restrict const-decl "R" restrict nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (card_disj_union formula-decl nil finite_sets nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (union_extend_restrict formula-decl nil card_tricks nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (disjoint_extend_restrict formula-decl nil card_tricks nil))
   shostak)
  (card_restrict_plus-1 nil 3412270828
   ("" (skosimp*)
    (("" (use "union_extend_restrict")
      ((""
        (claim "card(B!1) = card(%1)" t (~ "union(%, extend[%%](%))"))
        (("1" (rewrite "card_union")
          (("1" (replace -1)
            (("1" (hide -)
              (("1" (assert)
                (("1" (rewrite "card_extend[T,S]")
                  (("1" (assert)
                    (("1" (mult-by 1 "-1")
                      (("1" (assert)
                        (("1"
                          (match "intersection(%, %)" step
                                 (claim "empty?(%1)"))
                          (("1" (rewrite "empty_card") nil nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace -1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_extend formula-decl nil extend_set_props nil)
    (T formal-type-decl nil card_tricks nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S_pred const-decl "[T -> boolean]" card_tricks nil)
    (S formal-subtype-decl nil card_tricks nil)
    (restrict const-decl "R" restrict nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (card_disj_union formula-decl nil finite_sets nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (union_extend_restrict formula-decl nil card_tricks nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (disjoint_extend_restrict formula-decl nil card_tricks nil))
   shostak))
 (card_restrict_less 0
  (card_restrict_less-1 nil 3412274834
   ("" (skosimp*)
    (("" (use "card_restrict_plus")
      (("" (rewrite -1 :dir rl)
        (("" (rewrite "nonempty_card") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_restrict_plus formula-decl nil card_tricks nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_tricks nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (non_subtype_elements const-decl "set[T]" card_tricks nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)))

