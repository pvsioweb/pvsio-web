(finite_sets_below
 (finite_below 0
  (finite_below-1 nil 3338228413
   ("" (skolem!)
    (("" (expand "is_finite")
      (("" (inst + "N" "LAMBDA (i: (BS!1)): i")
        (("" (expand "injective?") (("" (skosimp) nil nil)) nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (card_below_fullset_TCC1 0
  (card_below_fullset_TCC1-1 nil 3338228399
   ("" (rewrite "finite_below") nil nil)
   ((fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_below formula-decl nil finite_sets_below nil))
   nil))
 (card_below_fullset 0
  (card_below_fullset-1 nil 3338228457
   ("" (expand "fullset")
    (("" (lemma "card_bij[below(N)]")
      (("" (inst - "N" "{x: below(N) | TRUE}")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1" (inst + "(LAMBDA (x: {x: below(N) | TRUE}): x)")
              (("1" (expand "bijective?")
                (("1" (split)
                  (("1" (expand "injective?") (("1" (skosimp) nil nil))
                    nil)
                   ("2" (expand "surjective?")
                    (("2" (skosimp) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "finite_below") nil nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_bij formula-decl nil finite_sets nil)
    (finite_below formula-decl nil finite_sets_below nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (card_below_TCC1 0
  (card_below_TCC1-1 nil 3338228399
   ("" (skolem!) (("" (rewrite "finite_below") nil nil)) nil)
   ((finite_below formula-decl nil finite_sets_below nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   nil))
 (card_below 0
  (card_below-1 nil 3338228590
   ("" (skolem!)
    (("" (lemma "card_subset[below(N)]")
      (("" (inst - "BS!1" "fullset[below(N)]")
        (("1" (lemma "card_below_fullset")
          (("1" (assert)
            (("1" (expand* "subset?" "fullset" "member") nil nil))
            nil))
          nil)
         ("2" (rewrite "finite_below") nil nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_subset formula-decl nil finite_sets nil)
    (finite_below formula-decl nil finite_sets_below nil)
    (card_below_fullset formula-decl nil finite_sets_below nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (finite_upto 0
  (finite_upto-1 nil 3338228787
   ("" (skolem!)
    (("" (expand "is_finite")
      (("" (inst + "N + 1" "LAMBDA (i: (US!1)): i")
        (("" (expand "injective?") (("" (skosimp) nil nil)) nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (card_upto_fullset_TCC1 0
  (card_upto_fullset_TCC1-1 nil 3338228399
   ("" (rewrite "finite_upto") nil nil)
   ((fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_upto formula-decl nil finite_sets_below nil))
   nil))
 (card_upto_fullset 0
  (card_upto_fullset-1 nil 3338228852
   ("" (expand "fullset")
    (("" (lemma "card_bij[upto(N)]")
      (("" (inst - "N + 1" "{x: upto(N) | TRUE}")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1" (inst + "LAMBDA (x: {x: upto(N) | TRUE}): x")
              (("1" (expand "bijective?")
                (("1" (split)
                  (("1" (expand "injective?") (("1" (skosimp) nil nil))
                    nil)
                   ("2" (expand "surjective?")
                    (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "finite_upto") nil nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_bij formula-decl nil finite_sets nil)
    (finite_upto formula-decl nil finite_sets_below nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (card_upto_TCC1 0
  (card_upto_TCC1-1 nil 3338228399
   ("" (skolem!) (("" (rewrite "finite_upto") nil nil)) nil)
   ((finite_upto formula-decl nil finite_sets_below nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   nil))
 (card_upto 0
  (card_upto-1 nil 3338228994
   ("" (skolem!)
    (("" (lemma "card_subset[upto(N)]")
      (("" (inst - "US!1" "fullset[upto(N)]")
        (("1" (lemma "card_upto_fullset")
          (("1" (assert)
            (("1" (expand* "subset?" "fullset" "member") nil nil))
            nil))
          nil)
         ("2" (rewrite "finite_upto") nil nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_subset formula-decl nil finite_sets nil)
    (finite_upto formula-decl nil finite_sets_below nil)
    (card_upto_fullset formula-decl nil finite_sets_below nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (pidgeon_hole_TCC1 0
  (pidgeon_hole_TCC1-1 nil 3338228399
   ("" (skosimp) (("" (rewrite "finite_intersection") nil nil)) nil)
   ((finite_intersection formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (pidgeon_hole 0
  (pidgeon_hole-1 nil 3338229106
   ("" (skosimp)
    (("" (use "card_union[below(N)]")
      (("" (use "card_below") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((card_union formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" finite_sets_below nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (card_below formula-decl nil finite_sets_below nil))
   shostak)))

