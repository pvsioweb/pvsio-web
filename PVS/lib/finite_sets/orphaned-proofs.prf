("finite_sets_product_real" finite_sets_product_real product_nat 0 (product_nat-2 nil 3411927754 ("" (auto-rewrite-theory "rationals") (("" (induct-and-simplify "A" :name "finite_set_induction_rest" :exclude "choose") (("" (typepred "f!1(choose(SS!1))") (("" (mult-ineq -1 -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((finite_set_induction_rest formula-decl nil finite_sets_inductions nil) (T formal-type-decl nil finite_sets_product_real nil) (product def-decl "R" finite_sets_product nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (restrict const-decl "R" restrict nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (finite_emptyset name-judgement "finite_set[T]" finite_sets_product_real nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (product_int application-judgement "int" finite_sets_product_real nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (remove const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (rest const-decl "set" sets nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (finite_rest application-judgement "finite_set[T]" finite_sets_product_real nil) (finite_remove application-judgement "finite_set[T]" finite_sets_product_real nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (ge_times_ge_any1 formula-decl nil extra_real_props nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil)) nil) (product_nat-1 nil 3411927478 ("" (judgement-tcc) nil nil) nil nil))("finite_sets_product_real" finite_sets_product_real product_int 0 (product_int-2 nil 3411927334 ("" (auto-rewrite-theory "rationals") (("" (auto-rewrite-theory "integers") (("" (induct-and-simplify "x1" :name "finite_set_induction_rest") (("" (induct-and-simplify "A" :name "finite_set_induction_rest") nil nil)) nil)) nil)) nil) ((closed_times formula-decl nil integers nil) (closed_times formula-decl nil rationals nil) (remove const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (rest const-decl "set" sets nil) (finite_remove application-judgement "finite_set[T]" finite_sets_product_real nil) (finite_rest application-judgement "finite_set[T]" finite_sets_product_real nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (finite_emptyset name-judgement "finite_set[T]" finite_sets_product_real nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (finite_set_induction_rest formula-decl nil finite_sets_inductions nil) (T formal-type-decl nil finite_sets_product_real nil) (product def-decl "R" finite_sets_product nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (restrict const-decl "R" restrict nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_times_real_is_real application-judgement "real" reals nil)) nil) (product_int-1 nil 3411927217 ("" (judgement-tcc) nil nil) nil nil))("finite_sets_product_real" finite_sets_product_real product_posreal 0 (product_posreal-1 nil 3411927050 ("" (auto-rewrite-theory "rationals") (("" (auto-rewrite-theory "integers") (("" (induct "A" :name "finite_set_induction_rest") (("1" (typepred "A!1") (("1" (propax) nil nil)) nil) ("2" (skosimp*) (("2" (hide 2) (("2" (rewrite "emptyset_is_empty?[T]") nil nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (split) (("1" (inst?) (("1" (flatten) (("1" (assert) (("1" (expand "product" +) (("1" (assert) (("1" (typepred "f!1(choose(SS!1))") (("1" (case "f!1(choose(SS!1)) * product(rest(SS!1), f!1) > 0") (("1" (assert) nil nil) ("2" (hide 3) (("2" (mult-ineq -2 -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "product" +) (("2" (typepred "f!1(choose(SS!1))") (("2" (case-replace "rest(SS!1) = emptyset") (("1" (hide -1) (("1" (rewrite "product_emptyset") (("1" (assert) nil nil)) nil)) nil) ("2" (hide -1 -2 2 3) (("2" (rewrite "emptyset_is_empty?[T]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (gt_times_gt_any1 formula-decl nil extra_real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (rest const-decl "set" sets nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (product_emptyset formula-decl nil finite_sets_product nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_rest application-judgement "finite_set[T]" finite_sets_product_real nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (finite_emptyset name-judgement "finite_set[T]" finite_sets_product_real nil) (emptyset const-decl "set" sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (finite_set_induction_rest formula-decl nil finite_sets_inductions nil) (T formal-type-decl nil finite_sets_product_real nil) (product def-decl "R" finite_sets_product nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (restrict const-decl "R" restrict nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (empty? const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3550437104 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3550437104 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3551458301 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3551458301 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 "" (REWRITE "zero_identity") NIL)("top" top IMPORTING1_TCC2 "" (REWRITE "plus_ac") NIL)("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3554342952 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3554342952 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3555183597 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3555183597 ("" (rewrite "plus_ac") nil nil) nil nil))("top" |top| IMPORTING1_TCC2 "" (REWRITE "plus_ac") NIL)("top" |top| IMPORTING1_TCC1 "" (REWRITE "zero_identity") NIL)("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3561790929 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3561790929 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3562434248 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3562434248 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3563700383 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3563700383 ("" (rewrite "plus_ac") nil nil) nil nil))("top" top IMPORTING1_TCC1 0 (IMPORTING1_TCC1-1 nil 3564906945 ("" (rewrite "zero_identity") nil nil) nil nil))("top" top IMPORTING1_TCC2 0 (IMPORTING1_TCC2-1 nil 3564906945 ("" (rewrite "plus_ac") nil nil) nil nil))