(finite_sets_inductions
 (cardinal_induction 0
  (cardinal_induction-1 nil 3338230161 ("" (grind :defs nil) nil nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (finite_set_induction 0
  (finite_set_induction-1 nil 3338230176
   ("" (skosimp)
    (("" (case "FORALL n, S: card(S) = n IMPLIES P!1(S)")
      (("1" (skosimp) (("1" (inst - "card(S!1)" "S!1") nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skosimp)
            (("1" (rewrite "empty_card" :dir rl)
              (("1" (rewrite "emptyset_is_empty?")
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (use "nonempty_card")
              (("2" (assert)
                (("2" (rewrite "nonempty_member")
                  (("2" (skolem!)
                    (("2" (inst - "remove(x!1, S!1)")
                      (("2" (inst - "x!1" "remove(x!1, S!1)")
                        (("2"
                          (auto-rewrite "card_remove"
                                        "add_remove_member")
                          (("2" (assert)
                            (("2" (expand "member")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (empty_card formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty_member formula-decl nil sets_lemmas nil)
    (finite_remove application-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (add_remove_member formula-decl nil sets_lemmas nil)
    (card_remove formula-decl nil finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (finite_set_ind_modified 0
  (finite_set_ind_modified-1 nil 3338230529
   ("" (skosimp*)
    (("" (use "finite_set_induction")
      (("" (assert)
        (("" (split)
          (("1" (inst - "S!1") nil nil)
           ("2" (skosimp)
            (("2" (inst - "e!1" "S!2")
              (("2" (assert)
                (("2" (case-replace "add(e!1, S!2) = S!2")
                  (("2" (grind-with-ext) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set_induction formula-decl nil finite_sets_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions nil))
   shostak))
 (finite_set_induction_rest 0
  (finite_set_induction_rest-1 nil 3338230659
   ("" (skosimp)
    (("" (case "FORALL n, S: card(S) = n IMPLIES P!1(S)")
      (("1" (skolem!) (("1" (inst - "card(S!1)" "S!1") nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skosimp)
            (("1" (hide -3)
              (("1" (case-replace "S!1 = emptyset")
                (("1" (rewrite "card_empty?")
                  (("1" (rewrite "emptyset_is_empty?") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (auto-rewrite "card_rest" "nonempty?")
            (("2" (skosimp*)
              (("2" (use "nonempty_card")
                (("2" (assert)
                  (("2" (inst? -4)
                    (("2" (inst - "rest(S!1)") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (card_empty? formula-decl nil finite_sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (emptyset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_rest application-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil))
   shostak))
 (finite_set_induction_union 0
  (finite_set_induction_union-1 nil 3338230825
   ("" (skosimp)
    (("" (rewrite "finite_set_induction")
      (("" (skosimp)
        (("" (inst? -)
          (("" (auto-rewrite "add_as_union" "singleton")
            (("" (inst - "S!1" "singleton(e!1)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set_induction formula-decl nil finite_sets_inductions nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_union application-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   shostak))
 (finite_set_induction_gen 0
  (finite_set_induction_gen-1 nil 3338230876
   ("" (skosimp)
    (("" (case "FORALL n, S: card(S) = n IMPLIES P!1(S)")
      (("1" (skolem!) (("1" (inst - "card(S!1)" "S!1") nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "n" + "NAT_induction")
          (("2" (skosimp*)
            (("2" (inst -3 "S!1")
              (("2" (assert)
                (("2" (skosimp)
                  (("2" (inst - "card(S2!1)")
                    (("2" (assert) (("2" (inst - "S2!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nonempty_card_induction_TCC1 0
  (nonempty_card_induction_TCC1-1 nil 3338230145
   ("" (skosimp)
    (("" (rewrite "empty_card") (("" (assert) nil nil)) nil)) nil)
   ((empty_card formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nonempty_card_induction 0
  (nonempty_card_induction-1 nil 3338231079
   ("" (skolem!)
    (("" (prop)
      (("1" (skosimp) (("1" (inst?) nil nil)) nil)
       ("2" (skolem-typepred)
        (("2" (rewrite "empty_card")
          (("2" (inst - "U!1" "card(U!1)") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (empty_card formula-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nonempty_finite_set_induct 0
  (nonempty_finite_set_induct-1 nil 3338231149
   ("" (skosimp*)
    (("" (case "FORALL S: empty?(S) OR Q!1(S)")
      (("1" (inst?) (("1" (assert) nil nil)) nil)
       ("2"
        (auto-rewrite "emptyset_is_empty?[T]" "emptyset" "singleton"
                      "singleton_as_add")
        (("2" (rewrite "finite_set_ind_modified")
          (("2" (hide 2 3)
            (("2" (skosimp)
              (("2" (split)
                (("1" (assert)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (ground)
                  (("2" (inst?)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil finite_sets_inductions nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" finite_sets_inductions nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions nil)
    (singleton_as_add formula-decl nil sets_lemmas nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil))
   shostak)))

