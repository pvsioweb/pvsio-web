(finite_sets_int (finite_subrng 0 (finite_subrng-1 nil 3338231299 ("" (skolem!) (("" (expand* "in_subrng" "is_finite") (("" (inst + "abs(j!1 - i!1 + 1)" "LAMBDA (x: {x: int | i!1 <= x AND x <= j!1}): x - i!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ((is_finite const-decl "bool" finite_sets nil) (in_subrng const-decl "bool" finite_sets_int nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil)) shostak)) (finite_subrng_subset 0 (finite_subrng_subset-1 nil 3338231427 ("" (skolem!) (("" (case "subset?({x: int | in_subrng(x, i!1, j!1) AND p!1(x)}, {x: int | in_subrng(x, i!1, j!1)})") (("1" (use "finite_subset") (("1" (assert) nil nil) ("2" (rewrite "finite_subrng") nil nil)) nil) ("2" (expand* "subset?" "member") (("2" (skosimp) nil nil)) nil)) nil)) nil) ((pred type-eq-decl nil defined_types nil) (in_subrng const-decl "bool" finite_sets_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_subrng formula-decl nil finite_sets_int nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (is_finite const-decl "bool" finite_sets nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (finite_set type-eq-decl nil finite_sets nil) (finite_subset formula-decl nil finite_sets nil) (member const-decl "bool" sets nil)) shostak)) (card_subrng_TCC1 0 (card_subrng_TCC1-1 nil 3338231286 ("" (skolem!) (("" (rewrite "finite_subrng") nil nil)) nil) ((finite_subrng formula-decl nil finite_sets_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) nil)) (card_subrng 0 (card_subrng-1 nil 3338231583 ("" (skolem!) (("" (lift-if) (("" (prop) (("1" (lemma "card_bij") (("1" (inst - "abs(j!1 - i!1 + 1)" "{x | in_subrng(x, i!1, j!1)}") (("1" (replace -1) (("1" (hide -1) (("1" (inst + "LAMBDA (x: {x | in_subrng(x, i!1, j!1)}): abs(x -i!1)") (("1" (expand "bijective?") (("1" (split) (("1" (expand "injective?") (("1" (grind) nil nil)) nil) ("2" (expand "surjective?") (("2" (skolem-typepred) (("2" (inst + "y!1 + i!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (rewrite "finite_subrng") nil nil)) nil)) nil) ("2" (case "{x: int | in_subrng(x, i!1, j!1)} = emptyset") (("1" (replace -1) (("1" (rewrite "card_emptyset") nil nil)) nil) ("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((emptyset const-decl "set" sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_emptyset name-judgement "finite_set[int]" finite_sets_int nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (card_emptyset formula-decl nil finite_sets nil) (<= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (finite_subrng formula-decl nil finite_sets_int nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (minus_int_is_int application-judgement "int" integers nil) (y!1 skolem-const-decl "below[abs(1 - i!1 + j!1)]" finite_sets_int nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (in_subrng const-decl "bool" finite_sets_int nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) shostak)) (finite_int_subrange 0 (finite_int_subrange-1 nil 3338231993 ("" (skolem!) (("" (expand "is_finite") (("" (inst + "abs(j!1 - i!1 + 1)" "LAMBDA (x: (extend[int, subrange(i!1, j!1), bool, FALSE]({x: subrange(i!1, j!1) | TRUE}))): x - i!1") (("1" (expand "injective?") (("1" (skosimp) nil nil)) nil) ("2" (skolem-typepred) (("2" (expand* "abs" "extend") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ((is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (subrange type-eq-decl nil integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (TRUE const-decl "bool" booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil)) shostak)) (finite_int_subrange_pred 0 (finite_int_subrange_pred-1 nil 3338232129 ("" (skolem!) (("" (case "is_finite({x: subrange(i!1, j!1) | TRUE})") (("1" (lemma "finite_subset") (("1" (inst - "{x: subrange(i!1, j!1) | TRUE}" "{x: subrange(i!1, j!1) | p!1(x)}") (("1" (assert) (("1" (hide -1 2) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand "is_finite") (("2" (skolem!) (("2" (inst + "N!1" "LAMBDA (x: (extend[int, subrange(i!1, j!1), bool, FALSE]({x: subrange(i!1, j!1) | TRUE}))): IF i!1 <= x AND x <= j!1 THEN f!1(x) ELSE 0 ENDIF") (("1" (grind :if-match nil) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp :preds? t) (("2" (expand "extend") (("2" (ground) nil nil)) nil)) nil) ("3" (skosimp) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "finite_int_subrange") (("2" (expand "is_finite") (("2" (skolem!) (("2" (inst + "N!1" "LAMBDA (x: ({x: subrange(i!1, j!1) | TRUE})): f!1(x)") (("1" (grind :if-match nil) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (finite_set type-eq-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (N!1 skolem-const-decl "nat" finite_sets_int nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (finite_subset formula-decl nil finite_sets nil) (finite_int_subrange formula-decl nil finite_sets_int nil)) shostak)) (card_int_subrange_TCC1 0 (card_int_subrange_TCC1-1 nil 3338231286 ("" (skolem!) (("" (rewrite "finite_int_subrange") nil nil)) nil) ((finite_int_subrange formula-decl nil finite_sets_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) nil)) (card_int_subrange 0 (card_int_subrange-1 nil 3338232425 ("" (skolem!) (("" (lift-if) (("" (prop) (("1" (lemma "card_bij") (("1" (inst - "abs(j!1 - i!1 + 1)" "extend[int, subrange(i!1, j!1), bool, FALSE]({x: subrange(i!1, j!1) | TRUE})") (("1" (replace -1) (("1" (hide -1) (("1" (inst + "LAMBDA (x: (extend[int, subrange(i!1, j!1), bool, FALSE]({x: subrange(i!1, j!1) | TRUE}))): abs(x - i!1)") (("1" (expand "bijective?") (("1" (split) (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand* "abs" "extend") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skolem-typepred) (("2" (inst + "y!1 + i!1") (("1" (expand "abs") (("1" (propax) nil nil)) nil) ("2" (expand* "abs" "extend") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand* "abs" "extend") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "extend[int, subrange(i!1, j!1), bool, FALSE]({x: subrange(i!1, j!1) | TRUE}) = emptyset") (("1" (replace -1) (("1" (lemma "card_emptyset") (("1" (propax) nil nil)) nil)) nil) ("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((emptyset const-decl "set" sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_emptyset name-judgement "finite_set[int]" finite_sets_int nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (card_emptyset formula-decl nil finite_sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (i!1 skolem-const-decl "int" finite_sets_int nil) (j!1 skolem-const-decl "int" finite_sets_int nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[abs(1 - i!1 + j!1)]" finite_sets_int nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (TRUE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) shostak)))
