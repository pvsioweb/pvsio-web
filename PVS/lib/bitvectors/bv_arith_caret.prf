(bv_arith_caret
 (bv_shift_TCC1 0
  (bv_shift_TCC1-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil nil))
 (bv_shift_TCC2 0
  (bv_shift_TCC2-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil nil))
 (bv_shift_TCC3 0
  (bv_shift_TCC3-1 nil 3341454041 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (bv_shift 0
  (bv_shift-1 nil 3341454060
   ("" (skolem!)
    (("" (case "ss!1 = 0")
      (("1" (replace -1)
        (("1" (expand "exp2")
          (("1" (rewrite "div_by_one")
            (("1" (rewrite "bv_caret_all[N!1]")
              (("1" (assert)
                (("1" (same-name "bv2nat[N!1 - ss!1]" "bv2nat[N!1]")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "^")
        (("2" (rewrite "bv2nat_as_sum[N!1]")
          (("2" (assert)
            (("2" (use "sigma_split" ("m" "ss!1 - 1"))
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2"
                      (case "sigma(ss!1, N!1 - 1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))) = exp2(ss!1) * sigma(0, N!1 - 1 - ss!1, extend(LAMBDA (ii: below(N!1 - ss!1)): exp2(ii) * b2n(bv!1(ii + ss!1))))")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "div_sum_nat")
                            (("1"
                              (inst -
                               "sigma(0, N!1 - 1 - ss!1, extend(LAMBDA (ii: below(N!1 - ss!1)): exp2(ii) * b2n(bv!1(ii + ss!1))))"
                               "exp2(ss!1)"
                               "sigma(0, ss!1 - 1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case
                                     "div(sigma(0, ss!1 - 1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))), exp2(ss!1)) = 0")
                                    (("1"
                                      (rewrite
                                       "bv2nat_as_sum[N!1 - ss!1]")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (use "div_lt_nat")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "bv2nat_as_sum[ss!1]")
                                              (("2"
                                                (inst
                                                 -
                                                 "LAMBDA (ii: below(ss!1)): bv!1(ii)")
                                                (("2"
                                                  (case
                                                   "sigma(0, ss!1 - 1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))) = bv2nat(LAMBDA (ii: below(ss!1)): bv!1(ii))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1 2 3)
                                                      (("2"
                                                        (expand
                                                         "extend")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "sigma_restrict_eq")
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide 3)
                          (("2" (lemma "sigma_shift")
                            (("2"
                              (inst -
                               "extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))"
                               "N!1 - 1 - ss!1" 0 "ss!1")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (use "sigma_mult")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (rewrite
                                               "sigma_restrict_eq")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (expand*
                                                     "restrict"
                                                     "extend")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (use
                                                         "exp2_sum")
                                                        (("2"
                                                          (expand
                                                           "b2n")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv_caret_all formula-decl nil bv_caret nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil)
    (div_by_one formula-decl nil div nil)
    (bv2nat_as_sum formula-decl nil bv_sum nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_split formula-decl nil sums nil)
    (extend const-decl "[nat -> nat]" bv_sum nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (sigma def-decl "nat" sums nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "[nat -> nat]" sums nil)
    (sigma_restrict_eq formula-decl nil sums nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (div_lt_nat formula-decl nil div nil)
    (div const-decl "integer" div nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div_sum_nat formula-decl nil div nil)
    (sigma_mult formula-decl nil sums nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_shift formula-decl nil sums nil)
    (nil application-judgement "nat" div nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (bv_bottom_TCC1 0
  (bv_bottom_TCC1-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil nil))
 (bv_bottom 0
  (bv_bottom-1 nil 3341455388
   ("" (skolem!)
    (("" (case "ss!1 = N!1 - 1")
      (("1" (replace -1)
        (("1" (rewrite "mod_lt_nat")
          (("1" (rewrite "bv_caret_all[N!1]")
            (("1" (assert)
              (("1" (same-name "bv2nat[ss!1 + 1]" "bv2nat[N!1]")
                (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "bv2nat_as_sum[N!1]")
        (("2" (lemma "sigma_split")
          (("2"
            (inst -
             "extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))"
             "N!1 - 1" 0 "ss!1")
            (("2" (assert)
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (lemma "sigma_shift")
                    (("2"
                      (inst -
                       "extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))"
                       "N!1 - ss!1 - 2" 0 "ss!1 + 1")
                      (("2" (assert)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (expand "extend" 2 2)
                              (("2"
                                (case
                                 "sigma(0, N!1 - 2 - ss!1, LAMBDA (n: nat): IF 1 + n + ss!1 < N!1 THEN exp2(1 + n + ss!1) * b2n(bv!1(1 + n + ss!1)) ELSE 0 ENDIF) = exp2(ss!1 + 1) * sigma(0, N!1 - ss!1 - 2, LAMBDA (n: nat): IF n + ss!1 + 1 < N!1 THEN exp2(n) * b2n(bv!1(n + ss!1 + 1)) ELSE 0 ENDIF)")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "mod_sum")
                                      (("1"
                                        (inst
                                         -
                                         "sigma(0, ss!1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))"
                                         "exp2(ss!1 + 1)"
                                         "sigma(0, N!1 - ss!1 - 2, LAMBDA (n: nat): IF n + ss!1 + 1 < N!1 THEN exp2(n) * b2n(bv!1(n + ss!1 + 1)) ELSE 0 ENDIF)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite "mod_lt_nat")
                                              (("1"
                                                (rewrite
                                                 "bv2nat_as_sum[ss!1 + 1]")
                                                (("1"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("1"
                                                    (hide 2 3)
                                                    (("1"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand*
                                                         "restrict"
                                                         "extend"
                                                         "^")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 3)
                                                (("2"
                                                  (lemma
                                                   "bv2nat_as_sum[ss!1 + 1]")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "LAMBDA (ii: below(ss!1 + 1)): bv!1(ii)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "sigma(0, ss!1, extend(LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii)))) = sigma(0, ss!1, extend(LAMBDA(ii: below(ss!1 + 1)): exp2(ii) * b2n(bv!1(ii))))")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               +
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (rewrite
                                                             "sigma_restrict_eq")
                                                            (("2"
                                                              (expand*
                                                               "restrict"
                                                               "extend")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (use "sigma_mult")
                                    (("2"
                                      (replace -1 + rl)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "sigma_restrict_eq")
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (expand "restrict")
                                                  (("2"
                                                    (lemma "exp2_sum")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "x!1"
                                                       "ss!1 + 1")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod_lt_nat formula-decl nil mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv_caret_all formula-decl nil bv_caret nil)
    (sigma_split formula-decl nil sums nil)
    (nil application-judgement "below(m)" mod nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (sigma_mult formula-decl nil sums nil)
    (mod_sum formula-decl nil mod nil)
    (sigma_restrict_eq formula-decl nil sums nil)
    (restrict const-decl "[nat -> nat]" sums nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "nat" sums nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_shift formula-decl nil sums nil)
    (extend const-decl "[nat -> nat]" bv_sum nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bv2nat_as_sum formula-decl nil bv_sum nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bv_top_TCC1 0
  (bv_top_TCC1-1 nil 3341454041
   ("" (skolem!)
    (("" (typepred "bv2nat[N!1](bv!1)")
      (("" (expand "div")
        (("" (use "both_sides_div_pos_lt1" ("y" "exp2(N!1)"))
          (("" (assert)
            (("" (rewrite "exp2_minus" :dir rl) (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (exp2_minus formula-decl nil exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (div const-decl "integer" div nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (bv_top 0
  (bv_top-1 nil 3341456143
   ("" (skolem!)
    (("" (use "bv_shift")
      (("" (replace -1 1 rl)
        (("" (rewrite "nat2bv_inv[N!1 - ss!1]") nil nil)) nil))
      nil))
    nil)
   ((bv_shift formula-decl nil bv_arith_caret nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat2bv_inv formula-decl nil bv_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (bv_bot_TCC1 0
  (bv_bot_TCC1-1 nil 3552271108 ("" (same-name-tcc) nil nil) nil nil))
 (bv_bot 0
  (bv_bot-1 nil 3341456190
   ("" (skolem!)
    (("" (use "bv_bottom")
      (("" (replace -1 1 rl)
        (("" (rewrite "nat2bv_inv[nn!1 + 1]") nil nil)) nil))
      nil))
    nil)
   ((bv_bottom formula-decl nil bv_arith_caret nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat2bv_inv formula-decl nil bv_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bv_add_subrange 0
  (bv_add_subrange-1 nil 3341456357
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (hide 2)
        (("" (rewrite "bv_add_mod[nn!1 + 1]")
          (("" (rewrite "bv_bottom")
            (("" (rewrite "bv_add_mod[N!1]")
              (("" (rewrite "bv_bottom")
                (("" (rewrite "bv_bottom")
                  (("" (rewrite "mod_of_mod")
                    (("" (rewrite "mod_of_mod")
                      ((""
                        (case "bv2nat(bv1!1) + bv2nat(bv2!1) < exp2(N!1)")
                        (("1" (rewrite "mod_lt_nat") nil nil)
                         ("2" (rewrite "mod_gt")
                          (("2" (lemma "exp2_sum")
                            (("2" (inst - "N!1 - nn!1 - 1" "1 + nn!1")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "mod_sum_pos")
                                      (("2"
                                        (inst
                                         -
                                         "bv2nat(bv1!1) + bv2nat(bv2!1)"
                                         "-exp2(N!1 - 1 - nn!1)"
                                         "exp2(1 + nn!1)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat_inj formula-decl nil bv_nat nil)
    (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bv_add_mod formula-decl nil bv_arith_nat nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_gt formula-decl nil mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mod_sum_pos formula-decl nil mod nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (mod_lt_nat formula-decl nil mod nil)
    (mod_of_mod formula-decl nil mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bv_bottom formula-decl nil bv_arith_caret nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bv_plus_caret 0
  (bv_plus_caret-1 nil 3341456558
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (hide 2)
        (("" (rewrite "bv_bottom")
          (("" (rewrite "bv_plus")
            (("" (rewrite "bv_plus[nn!1 + 1]")
              (("" (rewrite "bv_bottom")
                (("" (lemma "mod_of_mod")
                  (("" (inst - "i!1" "bv2nat(bv1!1)" "exp2(1 + nn!1)")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (lemma "exp2_sum")
                          (("" (inst - "N!1 - nn!1 - 1" "nn!1 + 1")
                            (("" (assert)
                              ((""
                                (replace -1)
                                ((""
                                  (hide -1)
                                  ((""
                                    (lemma "mod_mult")
                                    ((""
                                      (inst
                                       -
                                       "bv2nat(bv1!1) + i!1"
                                       "exp2(1 + nn!1)"
                                       "exp2(N!1 - 1 - nn!1)")
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat_inj formula-decl nil bv_nat nil)
    (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bv_bottom formula-decl nil bv_arith_caret nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_of_mod formula-decl nil mod nil)
    (exp2_sum formula-decl nil exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mod_mult formula-decl nil mod nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bv_middle_TCC1 0
  (bv_middle_TCC1-1 nil 3341454041 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bv_middle_TCC2 0
  (bv_middle_TCC2-1 nil 3341454041 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv_middle_TCC3 0
  (bv_middle_TCC3-1 nil 3341454041 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv_middle 0
  (bv_middle-1 nil 3341456694
   ("" (skosimp)
    (("" (assert)
      ((""
        (case "bv!1 ^ (i!1, j!1) = bv!1 ^ (n!1 - 1, j!1) ^ (i!1 - j!1, 0)")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1" (rewrite "bv_bottom")
              (("1" (rewrite "bv_shift") nil nil)) nil))
            nil))
          nil)
         ("2" (grind-with-ext) nil nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "nat" div nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (div const-decl "integer" div nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv_bottom formula-decl nil bv_arith_caret nil)
    (bv_shift formula-decl nil bv_arith_caret nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv2nat_caret_00_TCC1 0
  (bv2nat_caret_00_TCC1-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2nat_caret_00 0
  (bv2nat_caret_00-1 nil 3341456806 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv2nat_lem_TCC1 0
  (bv2nat_lem_TCC1-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2nat_lem_TCC2 0
  (bv2nat_lem_TCC2-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2nat_lem_TCC3 0
  (bv2nat_lem_TCC3-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2nat_lem_TCC4 0
  (bv2nat_lem_TCC4-1 nil 3341454041 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2nat_lem 0
  (bv2nat_lem-1 nil 3341456827
   ("" (skolem!)
    (("" (rewrite "bv_shift")
      (("" (expand* "exp2" "exp2")
        (("" (lemma "bv_bottom")
          (("" (inst?)
            (("" (inst - 0)
              (("" (rewrite "bv2nat_caret_00")
                (("" (expand* "exp2" "exp2" "div" "mod")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv_shift formula-decl nil bv_arith_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "nat" div nil)
    (bv_bottom formula-decl nil bv_arith_caret nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (div const-decl "integer" div nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv2nat_caret_00 formula-decl nil bv_arith_caret nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)))

