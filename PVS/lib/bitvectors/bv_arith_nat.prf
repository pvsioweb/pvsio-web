(bv_arith_nat
 (bv_add 0
  (bv_add-1 nil 3341430854
   ("" (skolem!)
    (("" (typepred "bv1!1 + bv2!1") (("" (propax) nil nil)) nil)) nil)
   ((+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_smallest 0
  (bv_smallest-1 nil 3341430887
   ("" (skolem!)
    (("" (expand ">=")
      (("" (rewrite "bv2nat_fill_F") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((>= const-decl "bool" bv_arith_nat_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil))
   shostak))
 (bv_greatest 0
  (bv_greatest-1 nil 3341430913
   ("" (skolem!)
    (("" (expand "<=")
      (("" (rewrite "bv2nat_fill_T") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" bv_arith_nat_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_fill_T formula-decl nil bv_nat nil))
   shostak))
 (bv_plus0 0
  (bv_plus0-1 nil 3341430935
   ("" (skosimp)
    (("" (use "bv2nat_inj")
      (("" (assert)
        (("" (rewrite "bv_plus")
          (("" (rewrite "mod_lt_nat") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_plus_mod 0
  (bv_plus_mod-1 nil 3341430978
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_plus")
        (("" (rewrite "bv_plus") (("" (rewrite "mod_of_mod") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_of_mod formula-decl nil mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil))
   shostak))
 (bv_minus_mod 0
  (bv_minus_mod-1 nil 3341431030
   ("" (skolem!)
    (("" (use "bv2nat_inj")
      (("" (assert)
        (("" (rewrite "bv_minus")
          (("" (rewrite "bv_minus")
            (("" (rewrite "mod_of_mod_neg") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "bvec[N]" bv_arith_nat_defs nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv_minus formula-decl nil bv_arith_nat_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (mod_of_mod_neg formula-decl nil mod nil)
    (nil application-judgement "below(m)" mod nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_minus_plus 0
  (bv_minus_plus-1 nil 3341431072
   ("" (skolem!)
    (("" (rewrite "bv_minus_mod")
      (("" (expand "-")
        (("" (use "bv2nat_inj")
          (("" (assert)
            (("" (rewrite "bv_plus")
              (("" (rewrite "bv_plus")
                (("" (rewrite "mod_of_mod")
                  (("" (lemma "mod_of_mod_neg")
                    (("" (inst - "bv2nat(bv!1)" "i!1" "exp2(N)")
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (use "mod_sum" ("k" 1))
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv_minus_mod formula-decl nil bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (bv2nat_inj formula-decl nil bv_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mod_of_mod formula-decl nil mod nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mod_sum formula-decl nil mod nil)
    (mod_of_mod_neg formula-decl nil mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "bvec[N]" bv_arith_nat_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "below(m)" mod nil))
   shostak))
 (bv_add_fill_F 0
  (bv_add_fill_F-1 nil 3341431280
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add")
        (("" (rewrite "bv2nat_fill_F") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_plus_wrap 0
  (bv_plus_wrap-1 nil 3341431335
   ("" (skolem!)
    (("" (use "bv2nat_inj")
      (("" (assert)
        (("" (rewrite "bv_plus")
          (("" (rewrite "mod_sum")
            (("" (rewrite "mod_lt")
              (("1" (expand "sgn") (("1" (propax) nil nil)) nil)
               ("2" (expand "abs") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_lt formula-decl nil mod nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sgn const-decl "int" real_defs nil)
    (mod_sum formula-decl nil mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (bv_plus1 0
  (bv_plus1-1 nil 3341431552
   ("" (skolem!)
    (("" (rewrite "bv_plus")
      (("" (expand "mod")
        (("" (lift-if)
          (("" (ground)
            (("" (rewrite "floor_small")
              (("1" (assert) nil nil)
               ("2" (expand "abs") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv_plus formula-decl nil bv_arith_nat_defs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_small formula-decl nil floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_minus1 0
  (bv_minus1-1 nil 3341431596
   ("" (skolem!)
    (("" (rewrite "bv_minus")
      (("" (lift-if)
        (("" (ground)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (rewrite "mod_lt")
                (("1" (expand "sgn") (("1" (propax) nil nil)) nil)
                 ("2" (expand "abs") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "mod_lt_nat") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (bv_minus formula-decl nil bv_arith_nat_defs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod_lt formula-decl nil mod nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bv_add_mod 0
  (bv_add_mod-1 nil 3341431769
   ("" (skolem!)
    (("" (use "bv_add")
      (("" (replace -1)
        (("" (lift-if)
          (("" (prop)
            (("1" (rewrite "mod_lt_nat") nil nil)
             ("2" (lemma "mod_sum_pos")
              (("2"
                (inst - "bv2nat(bv1!1) + bv2nat(bv2!1)" -1 "exp2(N)")
                (("2" (rewrite "mod_lt_nat") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv_add formula-decl nil bv_arith_nat nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_sum_pos formula-decl nil mod nil)
    (nil application-judgement "below(m)" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_fill_F_plus 0
  (bv_fill_F_plus-1 nil 3341431900
   ("" (skolem!)
    (("" (rewrite "bv_plus")
      (("" (rewrite "bv2nat_fill_F") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((bv_plus formula-decl nil bv_arith_nat_defs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_add_comm 0
  (bv_add_comm-1 nil 3341431933
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add") (("" (rewrite "bv_add") nil nil)) nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_both_sides 0
  (bv_both_sides-1 nil 3341431960
   ("" (skolem!)
    (("" (ground)
      (("" (typepred "bv1!1 + bv3!1")
        (("" (typepred "bv2!1 + bv3!1")
          (("" (lift-if)
            (("" (rewrite "bv2nat_inj")
              (("" (rewrite "bv2nat_inj") (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_add_assoc 0
  (bv_add_assoc-2 "" 3510532004
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add")
        (("" (rewrite "bv_add")
          (("" (rewrite "bv_add")
            (("" (rewrite "bv_add")
              (("" (lift-if)
                (("" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (lift-if) (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (lift-if) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak)
  (bv_add_assoc-1 nil 3341432079
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add")
        (("" (rewrite "bv_add")
          (("" (rewrite "bv_add")
            (("" (rewrite "bv_add")
              (("" (lift-if)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv_plus_inj 0
  (bv_plus_inj-1 nil 3341432120
   ("" (skolem!)
    (("" (iff)
      (("" (ground)
        (("" (case "bv2nat(bv!1 + n1!1) = bv2nat(bv!1 + n2!1)")
          (("1" (rewrite "bv_plus")
            (("1" (rewrite "bv_plus")
              (("1" (use "mod_inj_plus") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_inj_plus formula-decl nil mod nil)
    (nil application-judgement "below(m)" mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (bv2nat_elim 0
  (bv2nat_elim-1 nil 3341432592
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_plus")
        (("" (rewrite "bv_add")
          (("" (lift-if)
            (("" (prop)
              (("1" (rewrite "mod_lt_nat") nil nil)
               ("2" (rewrite "mod_gt") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (mod_gt formula-decl nil mod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "below(m)" mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_fill_T_plus1 0
  (bv_fill_T_plus1-1 nil 3341432747
   ("" (rewrite "bv2nat_inj")
    (("" (rewrite "bv_plus1")
      (("" (rewrite "bv2nat_fill_T")
        (("" (rewrite "bv2nat_fill_F") nil nil)) nil))
      nil))
    nil)
   ((bv_plus1 formula-decl nil bv_arith_nat nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (bv2nat_fill_T formula-decl nil bv_nat nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv2nat_inj formula-decl nil bv_nat nil))
   shostak))
 (bv_plus_nat2bv 0
  (bv_plus_nat2bv-1 nil 3341432803
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_plus")
        (("" (rewrite "bv_add")
          (("" (rewrite "bv2nat_inv")
            (("" (lift-if)
              (("" (ground)
                (("1" (lemma "mod_lt_nat")
                  (("1"
                    (inst - "exp2(N)"
                     "bv2nat(bv!1) + mod(k!1, exp2(N))")
                    (("1" (assert)
                      (("1" (rewrite "mod_of_mod") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "mod_gt")
                  (("2"
                    (inst - "bv2nat(bv!1) + mod(k!1, exp2(N))"
                     "exp2(N)")
                    (("2" (assert)
                      (("2" (rewrite "mod_of_mod") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "below(m)" mod nil)
    (bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_gt formula-decl nil mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (mod_of_mod formula-decl nil mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bv2nat_inv formula-decl nil bv_nat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_add_const_assoc 0
  (bv_add_const_assoc-1 nil 3341432947
   ("" (skolem!)
    (("" (rewrite "bv_plus_nat2bv")
      (("" (rewrite "bv_plus_nat2bv")
        (("" (rewrite "bv_add_assoc") nil nil)) nil))
      nil))
    nil)
   ((bv_plus_nat2bv formula-decl nil bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (nil application-judgement "below(m)" mod nil)
    (bv_add_assoc formula-decl nil bv_arith_nat nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_add_2_consts 0
  (bv_add_2_consts-1 nil 3341432973
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_plus")
        (("" (rewrite "bv_plus")
          (("" (rewrite "bv_plus")
            (("" (lemma "mod_of_mod")
              (("" (inst - "k2!1" "bv2nat(bv!1) + k1!1" "exp2(N)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (mod_of_mod formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (bv_plus formula-decl nil bv_arith_nat_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (bv_add_two_consts 0
  (bv_add_two_consts-1 nil 3341433057
   ("" (skolem!)
    (("" (rewrite "bv_plus_nat2bv")
      (("" (rewrite "bv_plus_nat2bv")
        ((""
          (case-replace
           "bv1!1 + nat2bv[N](mod(k1!1, exp2(N))) + (bv2!1 + nat2bv[N](mod(k2!1, exp2(N)))) = (bv1!1 + bv2!1) + nat2bv[N](mod(k1!1, exp2(N))) + nat2bv[N](mod(k2!1, exp2(N)))")
          (("1" (hide -1)
            (("1" (rewrite "bv_plus_nat2bv" :dir rl)
              (("1" (rewrite "bv_plus_nat2bv" :dir rl)
                (("1" (rewrite "bv_add_2_consts") nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "bv_add_assoc")
              (("2"
                (inst-cp - "bv1!1" "bv2!1"
                 "nat2bv[N](mod(k1!1, exp2(N)))")
                (("2" (replace -2 * rl)
                  (("2" (hide -2)
                    (("2" (lemma "bv_add_comm")
                      (("2"
                        (inst - "bv2!1"
                         "nat2bv[N](mod(k1!1, exp2(N)))")
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (inst-cp - "bv1!1"
                               "nat2bv[N](mod(k1!1, exp2(N)))" "bv2!1")
                              (("2"
                                (replace -2)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (inst
                                     -
                                     "bv1!1 + nat2bv[N](mod(k1!1, exp2(N)))"
                                     "bv2!1"
                                     "nat2bv[N](mod(k2!1, exp2(N)))")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv_plus_nat2bv formula-decl nil bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" bv_arith_nat nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (nil application-judgement "below(m)" mod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (bv_add_2_consts formula-decl nil bv_arith_nat nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat_defs nil)
    (bv_add_assoc formula-decl nil bv_arith_nat nil)
    (bv_add_comm formula-decl nil bv_arith_nat nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (bv_mult 0
  (bv_mult-1 nil 3341433663 ("" (skolem!) (("" (assert) nil nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)))

