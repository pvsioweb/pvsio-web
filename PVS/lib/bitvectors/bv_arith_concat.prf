(bv_arith_concat
 (not_over_concat 0
  (not_over_concat-1 nil 3341452868 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bvec type-eq-decl nil bv nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (bv2nat_concat_TCC1 0
  (bv2nat_concat_TCC1-1 nil 3552271097 ("" (same-name-tcc) nil nil) nil
   nil))
 (bv2nat_concat 0
  (bv2nat_concat-1 nil 3341452899
   ("" (skolem!)
    (("" (case "m!1 = 0")
      (("1" (replace -1)
        (("1" (expand "bv2nat" 1 3)
          (("1" (expand "bv2nat_rec")
            (("1" (rewrite "bvconcat_bot0")
              (("1" (expand "exp2")
                (("1" (assert)
                  (("1" (same-name "bv2nat[m!1 + n!1]" "bv2nat[n!1]")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "n!1 = 0")
        (("1" (expand "bv2nat" + 2)
          (("1" (assert)
            (("1" (same-name "bv2nat[m!1 + n!1]" "bv2nat[m!1]")
              (("1" (expand "bv2nat_rec")
                (("1" (rewrite "bvconcat_top0")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "bv2nat_as_sum[m!1 + n!1]")
          (("2" (assert)
            (("2" (lemma "sigma_split")
              (("2"
                (inst -
                 "extend(LAMBDA (ii: below(m!1 + n!1)): exp2(ii) * b2n((bvn!1 o bvm!1)(ii)))"
                 "n!1 + m!1 - 1" 0 "m!1 - 1")
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2"
                        (case "sigma(0, m!1 - 1, extend(LAMBDA (ii: below(m!1 + n!1)): exp2(ii) * b2n((bvn!1 o bvm!1)(ii)))) = bv2nat[m!1](bvm!1)")
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (expand* "extend" "o")
                                (("1"
                                  (lemma "sigma_shift")
                                  (("1"
                                    (inst
                                     -
                                     "LAMBDA (nn: nat): IF nn < m!1 + n!1 THEN exp2(nn) * IF nn < m!1 THEN b2n(bvm!1(nn)) ELSE b2n(bvn!1(nn - m!1)) ENDIF ELSE 0 ENDIF"
                                     "n!1 - 1"
                                     0
                                     "m!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "bv2nat_as_sum[n!1]")
                                            (("1"
                                              (lemma "sigma_mult")
                                              (("1"
                                                (inst
                                                 -
                                                 "extend(LAMBDA (ii: below(n!1)): exp2(ii) * b2n(bvn!1(ii)))"
                                                 "n!1 - 1"
                                                 0
                                                 "exp2(m!1)")
                                                (("1"
                                                  (replace -1 + rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand "extend")
                                                      (("1"
                                                        (rewrite
                                                         "sigma_restrict_eq")
                                                        (("1"
                                                          (hide 2 3 4)
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (use
                                                                   "exp2_sum")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 4)
                            (("2" (rewrite "bv2nat_as_sum[m!1]")
                              (("2"
                                (rewrite "sigma_restrict_eq")
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand* "extend" "restrict" "o")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bvconcat_bot0 formula-decl nil bv_concat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (bv2nat_as_sum formula-decl nil bv_sum nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (sigma_split formula-decl nil sums nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_shift formula-decl nil sums nil)
    (sigma_mult formula-decl nil sums nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp2_sum formula-decl nil exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (restrict const-decl "[nat -> nat]" sums nil)
    (sigma_restrict_eq formula-decl nil sums nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (n!1 skolem-const-decl "nat" bv_arith_concat nil)
    (m!1 skolem-const-decl "nat" bv_arith_concat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma def-decl "nat" sums nil)
    (extend const-decl "[nat -> nat]" bv_sum nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bvconcat_top0 formula-decl nil bv_concat nil))
   shostak)))

