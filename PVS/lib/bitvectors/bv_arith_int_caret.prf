(bv_arith_int_caret (bv_sign_of_frag_neg_TCC1 0 (bv_sign_of_frag_neg_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil)) (bv_sign_of_frag_neg_TCC2 0 (bv_sign_of_frag_neg_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil)) (bv_sign_of_frag_neg_TCC3 0 (bv_sign_of_frag_neg_TCC3-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) nil)) (bv_sign_of_frag_neg 0 (bv_sign_of_frag_neg-1 nil 3341534590 ("" (skosimp) (("" (use "bv2int_top_bit[N!1]") (("" (lemma "bv2int_top_bit[N!1 - i!1]") (("" (inst?) (("" (expand "^") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ((bv2int_top_bit formula-decl nil bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (^ const-decl "bit" bv nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (bv_sign_of_frag_pos_TCC1 0 (bv_sign_of_frag_pos_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil)) (bv_sign_of_frag_pos_TCC2 0 (bv_sign_of_frag_pos_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil)) (bv_sign_of_frag_pos_TCC3 0 (bv_sign_of_frag_pos_TCC3-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) nil)) (bv_sign_of_frag_pos 0 (bv_sign_of_frag_pos-1 nil 3341534656 ("" (skosimp) (("" (use "bv2int_top_bit[N!1]") (("" (lemma "bv2int_top_bit[N!1 - i!1]") (("" (inst?) (("" (expand "^") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ((bv2int_top_bit formula-decl nil bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (^ const-decl "bit" bv nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (bv2int_top_TCC1 0 (bv2int_top_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) nil nil)) (bv2int_top_TCC2 0 (bv2int_top_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) nil nil)) (bv2int_top_TCC3 0 (bv2int_top_TCC3-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((minus_odd_is_odd application-judgement "odd_int" integers nil)) nil)) (bv2int_top 0 (bv2int_top-2 "" 3510517290 ("" (skolem!) (("" (use "bv_shift") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (replace -1) (("" (hide -1) (("" (expand "b2n") (("" (lift-if) (("" (lift-if) (("" (ground) (("1" (hide -2) (("1" (expand "div") (("1" (lemma "floor_plus_int") (("1" (inst - "-exp2(N!1 - i!1)" "bv2nat(bv!1) / exp2(i!1)") (("1" (assert) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (lemma "exp2_sum") (("1" (inst - "N!1 - i!1" "i!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "bv_caret_elim") nil nil) ("3" (expand "div") (("3" (rewrite "bv_caret_elim") (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (bv2int_top-1 nil 3341534698 ("" (skolem!) (("" (use "bv_shift") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (replace -1) (("" (hide -1) (("" (expand "b2n") (("" (lift-if) (("" (lift-if) (("" (expand "div" 1 4) (("" (ground) (("1" (hide -1) (("1" (expand "div") (("1" (lemma "floor_plus_int") (("1" (inst - "-exp2(N!1 - i!1)" "bv2nat(bv!1) / exp2(i!1)") (("1" (assert) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (lemma "exp2_sum") (("1" (inst - "N!1 - i!1" "i!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "bv_caret_elim") nil nil) ("3" (rewrite "bv_caret_elim") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv_shift formula-decl nil bv_arith_caret nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "nat" div nil) (int_times_even_is_even application-judgement "even_int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (div const-decl "integer" div nil) (minus_int_is_int application-judgement "int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (exp2_sum formula-decl nil exp2 nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (floor_plus_int formula-decl nil floor_ceil nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (bv_caret_elim formula-decl nil bv_caret nil) (b2n const-decl "nbit" bit nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bv2int_lem formula-decl nil bv_int nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak)) (bv2int_concat_TCC1 0 (bv2int_concat_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) nil nil)) (bv2int_concat_TCC2 0 (bv2int_concat_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) nil nil)) (bv2int_concat 0 (bv2int_concat-1 nil 3341534958 ("" (skolem!) (("" (use "bv2nat_concat") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (lemma "bv_concat_top_bit") (("" (inst - "m!1" "n!1" "bvn!1" "bvm!1") (("" (rewrite "exp2_sum") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2nat_concat formula-decl nil bv_arith_concat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (bv_concat_top_bit formula-decl nil bv_concat nil) (exp2_sum formula-decl nil exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (bv2int_lem formula-decl nil bv_int nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak)) (bv2int_bottom_TCC1 0 (bv2int_bottom_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) nil nil)) (bv2int_bottom 0 (bv2int_bottom-1 nil 3341535025 ("" (skolem!) (("" (rewrite "bv2int_lem[i!1 + 1]") (("" (use "bv_bottom") (("" (rewrite "bv_caret_elim") (("" (assert) (("" (rewrite "bv2int_lem[N!1]") (("" (assert) (("" (lemma "exp2_sum") (("" (inst - "N!1 - i!1 - 1" "i!1 + 1") (("" (assert) (("" (replace -1) (("" (hide -1) (("" (lemma "mod_sum") (("" (inst - "bv2nat(bv!1)" "exp2(1 + i!1)" "-exp2(N!1 - 1 - i!1)") (("" (expand "b2n") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (bv2int_lem formula-decl nil bv_int nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil nat_types nil) (nil application-judgement "below(m)" mod nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (bv_caret_elim formula-decl nil bv_caret nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2_sum formula-decl nil exp2 nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil) (mod_sum formula-decl nil mod nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv_bottom formula-decl nil bv_arith_caret nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak)) (in_small_rng_TCC1 0 (in_small_rng_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil)) (in_small_rng_TCC2 0 (in_small_rng_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil)) (in_small_rng_TCC3 0 (in_small_rng_TCC3-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil)) (in_small_rng 0 (in_small_rng-1 nil 3341535363 ("" (skosimp) (("" (assert) (("" (use "bv2int_inj[N!1]") (("" (assert) (("" (hide 2) (("" (rewrite "bv2int_concat") (("" (rewrite "bv_caret_elim") (("" (rewrite "bv2int_bottom") (("" (expand* "in_rng_2s_comp" "maxint" "minint") (("" (flatten) (("" (use "bv2int_top_bit[N!1]") (("" (ground) (("1" (rewrite "bv2int_fill_F[N!1 - i!1]") (("1" (assert) (("1" (rewrite "mod_lt_int") (("1" (expand "exp2" 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "bv2int_fill_T[N!1 - i!1]") (("2" (assert) (("2" (rewrite "mod_lt_int") (("1" (assert) nil nil) ("2" (expand "exp2" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (bv2int_bottom formula-decl nil bv_arith_int_caret nil) (nil application-judgement "below(m)" mod nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (mod_lt_int formula-decl nil mod nil) (rng_2s_comp type-eq-decl nil bv_int_defs nil) (bv2int const-decl "rng_2s_comp" bv_int_defs nil) (exp2 def-decl "posnat" exp2 nil) (bv2int_fill_F formula-decl nil bv_int nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (bv2int_fill_T formula-decl nil bv_int nil) (bv2int_top_bit formula-decl nil bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (bv_caret_elim formula-decl nil bv_caret nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_inj formula-decl nil bv_int nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (in_rng_i_bv2int 0 (in_rng_i_bv2int-1 nil 3341535739 ("" (skosimp) (("" (use "in_small_rng") (("" (assert) (("" (case "bv2int(bv!1) = bv2int(fill[N!1 - i!1](bv!1 ^ (N!1 - 1)) o bv!1 ^ (i!1 - 1, 0))") (("1" (hide -2) (("1" (rewrite "bv2int_concat") (("1" (case-replace "bv!1 ^ (N!1 - 1) = FALSE") (("1" (rewrite "bv2int_fill_F[N!1 - i!1]") (("1" (assert) (("1" (lemma "bit_cases") (("1" (inst - "bv!1 ^ (i!1 - 1)") (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) (("1" (expand "^") (("1" (propax) nil nil)) nil) ("2" (hide -1 -3 -4 1) (("2" (replace -1) (("2" (hide -1) (("2" (expand "in_rng_2s_comp") (("2" (typepred "bv2int(bv!1 ^ (i!1 - 1, 0))") (("2" (expand* "minint" "maxint") (("2" (expand "exp2" -3 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case-replace "bv!1 ^ (N!1 - 1) = TRUE") (("1" (rewrite "bv2int_fill_T[N!1 - i!1]") (("1" (lemma "bit_cases") (("1" (inst - "bv!1 ^ (i!1 - 1)") (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) (("1" (hide -2 -3 1 2 3) (("1" (replace -1) (("1" (hide -1) (("1" (expand "in_rng_2s_comp") (("1" (typepred "bv2int(bv!1 ^ (i!1 - 1, 0))") (("1" (expand* "minint" "maxint") (("1" (expand "exp2" -3 2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "b2n") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((in_small_rng formula-decl nil bv_arith_int_caret nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int_defs nil) (rng_2s_comp type-eq-decl nil bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (TRUE const-decl "bool" booleans nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (bv2int_fill_T formula-decl nil bv_int nil) (bv2int_fill_F formula-decl nil bv_int nil) (bit_cases formula-decl nil bit nil) (b2n const-decl "nbit" bit nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (minus_int_is_int application-judgement "int" integers nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (FALSE const-decl "bool" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (bv_caret_negate 0 (bv_caret_negate-1 nil 3341536004 ("" (skolem!) (("" (rewrite "bv_unary_minus") (("" (rewrite "bv_plus_caret") (("" (case-replace "(NOT bv1!1) ^ (m!1, 0) = NOT (bv1!1 ^ (m!1, 0))") (("1" (rewrite "bv_unary_minus") nil nil) ("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (bv_unary_minus formula-decl nil bv_arithmetic nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (bv_plus_caret formula-decl nil bv_arith_caret nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (below type-eq-decl nil nat_types nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak)) (bv2int_in_rng_i_TCC1 0 (bv2int_in_rng_i_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil)) (bv2int_in_rng_i_TCC2 0 (bv2int_in_rng_i_TCC2-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil)) (bv2int_in_rng_i_TCC3 0 (bv2int_in_rng_i_TCC3-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil)) (bv2int_in_rng_i 0 (bv2int_in_rng_i-1 nil 3341536127 ("" (skosimp) (("" (rewrite "bv2int_inj") (("" (hide 2) (("" (use "in_rng_i_bv2int") (("" (assert) (("" (rewrite "bv2int_concat") (("" (expand "b2n") (("" (lift-if) (("" (rewrite "bv_caret_elim") (("" (ground) (("1" (rewrite "bv2int_fill_T") (("1" (assert) nil nil)) nil) ("2" (rewrite "bv2int_fill_F") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2int_inj formula-decl nil bv_int nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (in_rng_i_bv2int formula-decl nil bv_arith_int_caret nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (bv2int_fill_T formula-decl nil bv_int nil) (bv2int_fill_F formula-decl nil bv_int nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (bv_caret_elim formula-decl nil bv_caret nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (b2n const-decl "nbit" bit nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (bv2int_in_rng_i_top_TCC1 0 (bv2int_in_rng_i_top_TCC1-1 nil 3341534531 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (in_rng_2s_comp const-decl "bool" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil)) (bv2int_in_rng_i_top 0 (bv2int_in_rng_i_top-1 nil 3341536296 ("" (skosimp) (("" (use "bv2int_in_rng_i") (("" (assert) (("" (name-replace bv "fill[N!1 - n!1](bv!1 ^ (n!1 - 1))") (("" (replace -1) (("" (apply-extensionality :hide? t) (("" (expand* "^" "o") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)) (bv2int_of_sign_extension 0 (bv2int_of_sign_extension-1 nil 3341536389 ("" (skosimp) (("" (use "bv2int_in_rng_i") (("" (assert) (("" (lemma "sign_extend_lem") (("" (inst - "n!1" "bv!1 ^ (n!1 - 1, 0)" "N!1") (("" (rewrite "sign_extend_def") (("" (expand "^") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (sign_extend_lem formula-decl nil bv_arith_extend nil) (sign_extend_def formula-decl nil bv_extend nil) (^ const-decl "bit" bv nil) (above nonempty-type-eq-decl nil integers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak)))
