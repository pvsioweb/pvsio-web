(bv_int
 (bv2int_inj 0
  (bv2int_inj-2 "" 3510531969
   ("" (skosimp)
    (("" (rewrite "bv2nat_inj")
      (("" (expand "bv2int")
        (("" (lift-if)
          (("" (lift-if)
            (("" (ground) (("" (lift-if) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak)
  (bv2int_inj-1 nil 3341446225
   ("" (skosimp)
    (("" (rewrite "bv2nat_inj")
      (("" (expand "bv2int")
        (("" (lift-if) (("" (lift-if) (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv2int_surj 0
  (bv2int_surj-1 nil 3341446260
   ("" (skolem-typepred)
    (("" (expand* "bv2int" "maxint" "minint")
      (("" (lemma "bv2nat_surj")
        (("" (case-replace "iv!1 >= 0")
          (("1" (inst?)
            (("1" (skolem!)
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (expand "exp2" +) (("2" (assert) nil nil)) nil))
            nil)
           ("2" (inst - "iv!1 + exp2(N)")
            (("1" (skolem!)
              (("1" (inst?)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (expand "exp2" -2) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "exp2" +) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (iv!1 skolem-const-decl "rng_2s_comp[N]" bv_int nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv2nat_surj formula-decl nil bv_nat nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minint const-decl "int" bv_int_defs nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (bv2int_bij 0
  (bv2int_bij-1 nil 3341447634
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skosimp) (("1" (rewrite "bv2int_inj") nil nil)) nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem!) (("2" (rewrite "bv2int_surj") nil nil)) nil))
        nil))
      nil))
    nil)
   ((bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_inj formula-decl nil bv_int nil)
    (injective? const-decl "bool" functions nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (minint const-decl "int" bv_int_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bv2int_surj formula-decl nil bv_int nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (bv2int_lem_TCC1 0
  (bv2int_lem_TCC1-1 nil 3341446105 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bv2int_lem 0
  (bv2int_lem-1 nil 3341447684
   ("" (skolem!)
    (("" (expand "bv2int")
      (("" (lift-if)
        (("" (use "bv2nat_top_bit")
          (("" (expand "b2n") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (bv2nat_top_bit formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (b2n const-decl "nbit" bit nil))
   shostak))
 (bv2int_fill_F 0
  (bv2int_fill_F-1 nil 3341447756
   ("" (grind :rewrites ("bv2int_lem" "bv2nat_fill_F")) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (bv2int_lem formula-decl nil bv_int nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (fill const-decl "bit" bv nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil))
   shostak))
 (bv2int_fill_T 0
  (bv2int_fill_T-1 nil 3341447788
   ("" (grind :rewrites ("bv2int_lem" "bv2nat_fill_T")) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bv2int_lem formula-decl nil bv_int nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (fill const-decl "bit" bv nil)
    (bv2nat_fill_T formula-decl nil bv_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil))
   shostak))
 (bv2int_top_bit 0
  (bv2int_top_bit-1 nil 3341447803
   ("" (skolem!)
    (("" (rewrite "bv2int_lem")
      (("" (use "bv2nat_top_bit")
        (("" (expand "b2n") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((bv2int_lem formula-decl nil bv_int nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (b2n const-decl "nbit" bit nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2nat_top_bit formula-decl nil bv_nat nil))
   shostak))
 (bv2int_topbit 0
  (bv2int_topbit-1 nil 3341447848
   ("" (skolem!)
    (("" (use "bv2int_top_bit") (("" (ground) nil nil)) nil)) nil)
   ((bv2int_top_bit formula-decl nil bv_int nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int2bv_def 0
  (int2bv_def-1 nil 3341448035
   ("" (apply-extensionality :hide? t)
    (("1" (typepred "int2bv(x!1)")
      (("1" (expand "inverse")
        (("1" (use "epsilon_ax[bvec[N]]")
          (("1" (rewrite "bv2int_inj")
            (("1" (inst + "int2bv(x!1)") nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (expand "inverse")
        (("2" (use "epsilon_ax[bvec[N]]")
          (("2" (assert)
            (("2" (inst + "int2bv(x1!1)") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (bv2int_inj formula-decl nil bv_int nil)
    (epsilon const-decl "T" epsilons nil)
    (inverse const-decl "D" function_inverse nil)
    (int2bv const-decl "{bv: bvec[N] | bv2int(bv) = iv}" bv_int_defs
     nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (minint const-decl "int" bv_int_defs nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (int2bv_bij 0
  (int2bv_bij-1 nil 3341448215
   ("" (rewrite "int2bv_def")
    (("" (rewrite "bij_inv_is_bij[bvec[N], rng_2s_comp]")
      (("" (rewrite "bv2int_bij") nil nil)) nil))
    nil)
   ((bij_inv_is_bij formula-decl nil function_inverse nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (bv2int_bij formula-decl nil bv_int nil)
    (int2bv_def formula-decl nil bv_int nil))
   shostak))
 (bv2int_inv 0
  (bv2int_inv-1 nil 3341448265
   ("" (skolem!)
    (("" (lemma "surj_right" ("f" "bv2int"))
      (("" (expand "right_inverse?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (minint const-decl "int" bv_int_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (surj_right formula-decl nil function_inverse nil)
    (right_inverse? const-decl "bool" function_inverse_def nil))
   shostak))
 (int2bv_inv 0
  (int2bv_inv-1 nil 3341448311
   ("" (skolem!)
    (("" (typepred "int2bv(bv2int(bv!1))")
      (("" (rewrite "bv2int_inj") nil nil)) nil))
    nil)
   ((int2bv const-decl "{bv: bvec[N] | bv2int(bv) = iv}" bv_int_defs
     nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (minint const-decl "int" bv_int_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bv2int_inj formula-decl nil bv_int nil))
   shostak))
 (int2bv_2nat_TCC1 0
  (int2bv_2nat_TCC1-1 nil 3341446105 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (minint const-decl "int" bv_int_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxint const-decl "int" bv_int_defs nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (int2bv_2nat_TCC2 0
  (int2bv_2nat_TCC2-1 nil 3341446105 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_int nil)
    (minint const-decl "int" bv_int_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxint const-decl "int" bv_int_defs nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (int2bv_2nat 0
  (int2bv_2nat-1 nil 3341448376
   ("" (skolem-typepred)
    (("" (use "bv2int_inj")
      (("1" (prop)
        (("1" (hide 2)
          (("1" (rewrite "bv2int_inv")
            (("1" (lift-if)
              (("1" (prop)
                (("1" (expand "bv2int")
                  (("1" (rewrite "bv2nat_inv[N]")
                    (("1" (expand "maxint") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "bv2int")
                  (("2" (rewrite "bv2nat_inv[N]")
                    (("2" (rewrite "exp2")
                      (("2" (grind :exclude "exp2") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (rewrite "exp2") (("2" (grind :exclude "exp2") nil nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (rewrite "exp2") (("3" (grind :exclude "exp2") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2int_inj formula-decl nil bv_int nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int2bv const-decl "{bv: bvec[N] | bv2int(bv) = iv}" bv_int_defs
     nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (ii!1 skolem-const-decl "rng_2s_comp[N]" bv_int nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat_inv formula-decl nil bv_nat nil)
    (bv2int_inv formula-decl nil bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minint const-decl "int" bv_int_defs nil)
    (N formal-const-decl "posnat" bv_int nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak)))

