(bv_arith_extend
 (zero_extend_lem 0
  (zero_extend_lem-1 nil 3341534233
   ("" (skolem!)
    (("" (expand "zero_extend")
      (("" (rewrite "bv2nat_concat")
        (("" (rewrite "bv2nat_fill_F[k!1 - n!1]")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_concat formula-decl nil bv_arith_concat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sign_to_zero_TCC1 0
  (sign_to_zero_TCC1-1 nil 3341534220 ("" (subtype-tcc) nil nil) nil
   nil))
 (sign_to_zero 0
  (sign_to_zero-1 nil 3341534273 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bvec type-eq-decl nil bv nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (FALSE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bit" bv nil)
    (sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs nil)
    (zero_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (sign_extend_lem 0
  (sign_extend_lem-1 nil 3341534292
   ("" (skolem!)
    (("" (expand "sign_extend")
      (("" (rewrite "bv2int_concat")
        (("" (lemma "bit_cases")
          (("" (inst - "bv!1 ^ (n!1 - 1)")
            (("" (split)
              (("1" (replace -1)
                (("1" (rewrite "bv2int_fill_F[k!1 - n!1]")
                  (("1" (expand "b2n") (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (rewrite "bv2int_fill_T[k!1 - n!1]")
                  (("2" (expand "b2n") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs nil)
    (bit_cases formula-decl nil bit nil)
    (bv2int_fill_F formula-decl nil bv_int nil)
    (b2n const-decl "nbit" bit nil)
    (bv2int_fill_T formula-decl nil bv_int nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_concat formula-decl nil bv_arith_int_concat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (zero_extend_lsend_TCC1 0
  (zero_extend_lsend_TCC1-1 nil 3341534220 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (zero_extend_lsend 0
  (zero_extend_lsend-1 nil 3341534391
   ("" (skolem!)
    (("" (expand "zero_extend_lsend")
      (("" (rewrite "bv2nat_concat")
        (("" (assert)
          (("" (rewrite "bv2nat_fill_F[k!1 - n!1]") nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_extend_lsend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs
     nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_concat formula-decl nil bv_arith_concat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bv2int_elim_gen_TCC1 0
  (bv2int_elim_gen_TCC1-1 nil 3341534220 ("" (subtype-tcc) nil nil) nil
   nil))
 (bv2int_elim_gen 0
  (bv2int_elim_gen-1 nil 3341534436
   ("" (skolem!)
    (("" (use "sign_extend_lem")
      (("" (replace -1 + rl)
        (("" (rewrite "bv2int_elim[n!1]") nil nil)) nil))
      nil))
    nil)
   ((sign_extend_lem formula-decl nil bv_arith_extend nil)
    (above nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pos_nat_below type-eq-decl nil bv_arith_extend nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend_defs nil)
    (bv2int_elim formula-decl nil bv_arithmetic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak)))

