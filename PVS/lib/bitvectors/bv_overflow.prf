(bv_overflow
 (overflow_then_eq_TCC1 0
  (overflow_then_eq_TCC1-1 nil 3341592654 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (in_rng_2s_comp const-decl "bool" bv_int_defs nil)
    (overflow const-decl "bool" bv_overflow nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (overflow_then_eq 0
  (overflow_then_eq-1 nil 3341592669
   ("" (skosimp)
    (("" (lemma "bv2int_topbit")
      (("" (inst-cp - "bv2!1")
        (("" (inst - "bv1!1")
          (("" (expand* "overflow" "in_rng_2s_comp")
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((N formal-const-decl "posnat" bv_overflow nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_topbit formula-decl nil bv_int nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (overflow const-decl "bool" bv_overflow nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (in_rng_2s_comp const-decl "bool" bv_int_defs nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (bv2int_overflow_nat 0
  (bv2int_overflow_nat-1 nil 3341592730
   ("" (skosimp)
    (("" (expand "in_rng_2s_comp")
      (("" (expand "bv2int" 2)
        (("" (use "bv_add[N]")
          (("" (replace -1)
            (("" (hide -1)
              (("" (expand* "minint" "maxint" "bv2int")
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (ground)
                        (("" (lemma "exp2_n" ("n" "N - 1"))
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_rng_2s_comp const-decl "bool" bv_int_defs nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_overflow nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2_n formula-decl nil exp2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minint const-decl "int" bv_int_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (maxint const-decl "int" bv_int_defs nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_not_in_rng_int_TCC1 0
  (bv_not_in_rng_int_TCC1-1 nil 3341592654 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (in_rng_2s_comp const-decl "bool" bv_int_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (bv_not_in_rng_int 0
  (bv_not_in_rng_int-1 nil 3341592958
   ("" (skosimp)
    (("" (rewrite "bv2int_overflow_nat")
      (("" (lemma "bv2int_lem")
        (("" (inst-cp - "bv2!1")
          (("" (inst - "bv1!1")
            (("" (expand "^") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2int_overflow_nat formula-decl nil bv_overflow nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_overflow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "bit" bv nil)
    (bv2int_lem formula-decl nil bv_int nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv2int_add_overflow 0
  (bv2int_add_overflow-1 nil 3341593053
   ("" (skosimp)
    (("" (use "bv_not_in_rng_int")
      (("" (assert)
        (("" (lemma "overflow_then_eq")
          (("" (inst - "bv1!1" "bv2!1")
            (("" (expand* "overflow" "^")
              (("" (replace -2)
                (("" (hide -2)
                  (("" (lift-if)
                    (("" (lemma "bv2int_topbit[N]")
                      (("" (inst-cp - "bv2!1")
                        (("" (inst - "bv1!1")
                          (("" (expand* "b2n" "^")
                            (("" (lift-if)
                              ((""
                                (lift-if)
                                (("" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bv_not_in_rng_int formula-decl nil bv_overflow nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bv_overflow nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (overflow_then_eq formula-decl nil bv_overflow nil)
    (^ const-decl "bit" bv nil)
    (overflow const-decl "bool" bv_overflow nil)
    (bv2int_topbit formula-decl nil bv_int nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (b2n const-decl "nbit" bit nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_sum_limits 0
  (bv_sum_limits-1 nil 3341593154
   ("" (skolem!) (("" (ground) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bv_bits_for_overflow_TCC1 0
  (bv_bits_for_overflow_TCC1-1 nil 3341592654
   ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bv_bits_for_overflow 0
  (bv_bits_for_overflow-1 nil 3341593228
   ("" (skosimp)
    (("" (lemma "bv2int_topbit[N]")
      (("" (inst-cp - "bv1!1")
        (("" (inst-cp - "bv2!1")
          (("" (inst - "bv1!1 + bv2!1")
            (("" (use "bv2int_add")
              (("" (expand "overflow")
                (("" (iff) (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((N formal-const-decl "posnat" bv_overflow nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_topbit formula-decl nil bv_int nil)
    (bv2int_add formula-decl nil bv_arithmetic nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (overflow const-decl "bool" bv_overflow nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_overflow_bits_ne 0
  (bv_overflow_bits_ne-1 nil 3341593366
   ("" (skosimp)
    (("" (lemma "bv2int_topbit[N]")
      (("" (inst-cp - "bv1!1")
        (("" (inst-cp - "bv2!1")
          (("" (inst - "bv1!1 + bv2!1")
            ((""
              (case "bv2int(bv1!1 + bv2!1) = bv2int(bv1!1) + bv2int(bv2!1) + 2* exp2(N) * b2n(bv1!1(N - 1)) - exp2(N)")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (expand* "^" "b2n")
                    (("1" (lift-if)
                      (("1" (use "bv_sum_limits")
                        (("1"
                          (expand* "overflow" "in_rng_2s_comp" "minint"
                           "maxint")
                          (("1" (lemma "exp2_n" ("n" "N - 1"))
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 -5)
                (("2" (use "bv2int_add_overflow")
                  (("2" (expand "overflow")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (expand* "b2n" "^" "in_rng_2s_comp")
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((N formal-const-decl "posnat" bv_overflow nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_topbit formula-decl nil bv_int nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bv2int const-decl "rng_2s_comp" bv_int_defs nil)
    (rng_2s_comp type-eq-decl nil bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (minint const-decl "int" bv_int_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in_rng_2s_comp const-decl "bool" bv_int_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (overflow const-decl "bool" bv_overflow nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (exp2_n formula-decl nil exp2 nil)
    (bv_sum_limits formula-decl nil bv_overflow nil)
    (^ const-decl "bit" bv nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bv2int_add_overflow formula-decl nil bv_overflow nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (bv_overflow_def 0
  (bv_overflow_def-1 nil 3341594454
   ("" (skolem!)
    (("" (iff)
      (("" (prop)
        (("1" (rewrite "overflow_then_eq") nil nil)
         ("2" (forward-chain "bv_overflow_bits_ne") nil nil)
         ("3" (rewrite "bv_bits_for_overflow") nil nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (bv_bits_for_overflow formula-decl nil bv_overflow nil)
    (bv_overflow_bits_ne formula-decl nil bv_overflow nil)
    (overflow_then_eq formula-decl nil bv_overflow nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_overflow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak)))

