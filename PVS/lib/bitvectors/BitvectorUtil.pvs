%
%  BitvectorUtil
%  =============
%
%  for Translating Java Classes into the Higher Order Logic of PVS.
%
%  All integral types are interpreted as PVS integers, without 
%  taking bounds into account
%
%  Author: Bart Jacobs
%  Integrated with the bitvector library by Sam Owre <owre@csl.sri.com>

BitvectorUtil[N : nat] : THEORY
BEGIN

  ASSUMING
     N_size: ASSUMPTION N >= 2
  ENDASSUMING

  IMPORTING bv_core, bv_rules, bv_notes

  bv, bv1, bv2 : VAR bvec[N]
  BV, BV1, BV2 : VAR bvec[2*N]
  k : VAR int

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% auxiliary results
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  bvec_induction : LEMMA % :-)
    FORALL(p:PRED[bvec[N]]) :
      p(fill[N](FALSE))
        AND
      (FORALL(bv:bvec[N]) : p(bv) IMPLIES p(bv+1))
        IMPLIES
      FORALL(bv:bvec[N]) : p(bv)

  plus_min_zero : LEMMA % :-)
    bv + (-bv) = fill[N](FALSE)

  min_fill_F : LEMMA % :-)
    -fill[N](FALSE) = fill[N](FALSE)

  inc_zero : LEMMA % :-)
    (bv+1)(0) IFF NOT bv(0)

  sum_upper_n : LEMMA % :-)
    FORALL(F : [nat -> nat], high,low,n : nat) :
      low <= n AND n <= high
        IMPLIES
      sigma(low, high, F) >= F(n)

  bv2nat_upper_n : LEMMA % :-)
    FORALL(n:below(N)) :
      bv(n) IMPLIES bv2nat(bv) >= exp2(n)

  bv2nat_upperbound : LEMMA % :-)
    FORALL(n:below(N)) :
      bv2nat(bv) < exp2(n) 
        IFF
      FORALL(k:below(N)) : k >= n IMPLIES NOT bv(k)

  bv2nat_upperbound_caret : LEMMA % :-)
    FORALL(n:below(N)) :
      bv2nat[N](bv) < exp2(n) 
        IMPLIES
      bv2nat[N](bv) = IF n = 0
                      THEN 0
                      ELSE bv2nat[n](bv^(n-1,0))
                      ENDIF

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Widen & Narrow
%
% These are typical Java Integral operations to move back and forth
% between integral types. Widen doubles the length of the 
% representation (e.g. from byte to short (8 to 16 bits), or
% from short to int (16 to 32 bits). It does so by keeping the sign.
% 
% In the reverse direction, narrowing drops half of the bits (the
% most significant ones) in going e.g. from int to short. This
% may affect the sign.
%
% See, JLS (Java Language Specification, 2nd ed.), 5.1.2 and 5.1.3.
%
% Operations on integral types typically first ``promote'' the
% arguments to int type.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  widen(bv) : bvec[2*N] = 
    LAMBDA(k:below(2*N)) : IF k < N-1
                           THEN bv(k) 
                           ELSE bv(N-1) % negative byte
                           ENDIF

  bv2int_widen : LEMMA % :-)
    bv2int[2*N](widen(bv)) = bv2int[N](bv)

  widen_inj : LEMMA % :-)
    (widen(bv1) = widen(bv2)) = (bv1 = bv2)

  bv2int_plus_widens : LEMMA % :-)
    bv2int[2*N](widen(bv1) + widen(bv2)) = bv2int[N](bv1) + bv2int[N](bv2)

  bv2int_min_widen : LEMMA % :-)
    bv2int[2*N](-widen(bv)) = -bv2int[N](bv)

  bv2nat_widen : LEMMA % :-)
    bv2nat(widen(bv)) = IF bv2nat(bv) < exp2(N-1)
                        THEN bv2nat(bv)
                        ELSE bv2nat(bv) + exp2(2*N)-exp2(N)
                        ENDIF

  bv2nat_widen_null : LEMMA % :-)
    (bv2nat(widen(bv)) = 0) = (bv2nat(bv) = 0)

  narrow(BV) : bvec[N] = BV^(N-1,0)

  bv2int_narrow : LEMMA % :-)
    -exp2(N-1) <= bv2int(BV) AND bv2int(BV) < exp2(N-1)
      IMPLIES
    bv2int[N](narrow(BV)) = bv2int[2*N](BV)

  narrow_int2bv : LEMMA % :-)
    -exp2(N-1) <= k AND k < exp2(N-1)
      IMPLIES
    narrow(int2bv[2*N](k)) = int2bv[N](k)

  narrow_widen : LEMMA % :-)
    narrow(widen(bv)) = bv;

  narrow_plus : LEMMA % :-)
    narrow(BV1 + BV2) = narrow(BV1) + narrow(BV2)

  narrow_min : LEMMA % :-)
    narrow(-BV) = -narrow(BV)
    
  narrow_minus : LEMMA % :-)
    narrow(BV1 - BV2) = narrow(BV1) - narrow(BV2)

  % The next lemma will probably not often work because of the representation
  % of bitvectors, namely as:  (x o (x o (x o (x...))))

  narrow_concat : LEMMA %-)
    FORALL (bv1,bv2 : bvec[N]):
      narrow[2*N](bv1 o bv2) = bv2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% More auxiliary results
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  leftshift_zero : LEMMA % :-)
    left_shift(0, bv) = bv

  leftshift_inc : LEMMA % :-)
    FORALL(n:below(N-1)) : 
      n > 0  % Condition needed to prevent circular rewriting
        IMPLIES
      left_shift(n+1, bv) = left_shift(1, left_shift(n, bv))

  bv2nat_leftshift : LEMMA % :-)
    FORALL(n:below(N)) :
      bv2nat(bv) < exp2(N-n) 
        IMPLIES 
      bv2nat(left_shift(n, bv)) = exp2(n) * bv2nat(bv)

  bv2nat_rightshift_upperbound : LEMMA % :-)
    FORALL(n:below(N)) :
      exp2(n) * bv2nat(right_shift(n, bv)) <= bv2nat(bv)

  bv2int_rightshift_upperbound : LEMMA % :-)
    FORALL(n:below(N)) : 
      bv2int(bv) >= 0
        IMPLIES
      exp2(n) * bv2int(right_shift(n, bv)) <= bv2int(bv)

  rightshift_zero : LEMMA % :-)
    right_shift(0, bv) = bv

  rightshift_inc : LEMMA % :-)
    FORALL(n:below(N-1)) :
      n > 0  % Condition needed to prevent circular rewriting
        IMPLIES
      right_shift(n+1, bv) = right_shift(1, right_shift(n, bv))

  bv2int_rightshift_pos : LEMMA % :-)
    FORALL(n:posnat) : 
      bv2int(right_shift(n, bv)) >= 0

  leftshift1_add_aux : LEMMA % :-)
    FORALL(n:below(N-1)) : 
      n_cout_rec[N](n+1, left_shift(1, bv1), left_shift(1, bv2), FALSE)
      =
      n_cout_rec[N](n, bv1, bv2, FALSE)

  leftshift1_add : LEMMA % :-)
   left_shift(1, bv1 + bv2) = 
     left_shift(1, bv1) + left_shift(1, bv2)

  narrow_rightshift : LEMMA % :-)
    FORALL(n:nat) :
    0 <= bv2int(BV) AND bv2int(BV) < exp2(N)
        IMPLIES
      narrow(right_shift(n, BV)) = right_shift(n, narrow(BV))

END BitvectorUtil
