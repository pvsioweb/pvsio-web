%%% ADT file generated from NIL

ordstruct_adt: THEORY
 BEGIN

  ordstruct: TYPE

  zero?, nonzero?: [ordstruct -> boolean]

  coef: [(nonzero?) -> posnat]

  exp: [(nonzero?) -> ordstruct]

  rest: [(nonzero?) -> ordstruct]

  zero: (zero?)

  add: [[posnat, ordstruct, ordstruct] -> (nonzero?)]

  ordstruct_ord: [ordstruct -> upto(1)]

  ordstruct_ord_defaxiom: AXIOM
    ordstruct_ord(zero) = 0 AND
     (FORALL (coef: posnat, exp: ordstruct, rest: ordstruct):
        ordstruct_ord(add(coef, exp, rest)) = 1);

  ord(x: ordstruct): [ordstruct -> upto(1)] =
      CASES x OF zero: 0, add(add1_var, add2_var, add3_var): 1 ENDCASES

  ordstruct_zero_extensionality: AXIOM
    FORALL (zero?_var: (zero?), zero?_var2: (zero?)):
      zero?_var = zero?_var2;

  ordstruct_add_extensionality: AXIOM
    FORALL (nonzero?_var: (nonzero?), nonzero?_var2: (nonzero?)):
      coef(nonzero?_var) = coef(nonzero?_var2) AND
       exp(nonzero?_var) = exp(nonzero?_var2) AND
        rest(nonzero?_var) = rest(nonzero?_var2)
       IMPLIES nonzero?_var = nonzero?_var2;

  ordstruct_add_eta: AXIOM
    FORALL (nonzero?_var: (nonzero?)):
      add(coef(nonzero?_var), exp(nonzero?_var), rest(nonzero?_var)) =
       nonzero?_var;

  ordstruct_coef_add: AXIOM
    FORALL (add1_var: posnat, add2_var: ordstruct, add3_var: ordstruct):
      coef(add(add1_var, add2_var, add3_var)) = add1_var;

  ordstruct_exp_add: AXIOM
    FORALL (add1_var: posnat, add2_var: ordstruct, add3_var: ordstruct):
      exp(add(add1_var, add2_var, add3_var)) = add2_var;

  ordstruct_rest_add: AXIOM
    FORALL (add1_var: posnat, add2_var: ordstruct, add3_var: ordstruct):
      rest(add(add1_var, add2_var, add3_var)) = add3_var;

  ordstruct_inclusive: AXIOM
    FORALL (ordstruct_var: ordstruct):
      zero?(ordstruct_var) OR nonzero?(ordstruct_var);

  ordstruct_induction: AXIOM
    FORALL (p: [ordstruct -> boolean]):
      (p(zero) AND
        (FORALL (add1_var: posnat, add2_var: ordstruct,
                 add3_var: ordstruct):
           p(add2_var) AND p(add3_var) IMPLIES
            p(add(add1_var, add2_var, add3_var))))
       IMPLIES (FORALL (ordstruct_var: ordstruct): p(ordstruct_var));

  subterm(x: ordstruct, y: ordstruct):  boolean =
      x = y OR
       CASES y
         OF zero: FALSE,
            add(add1_var, add2_var, add3_var):
              subterm(x, add2_var) OR subterm(x, add3_var)
         ENDCASES;

  <<:  (strict_well_founded?[ordstruct]) =
      LAMBDA (x, y: ordstruct):
        CASES y
          OF zero: FALSE,
             add(add1_var, add2_var, add3_var):
               (x = add2_var OR x << add2_var) OR
                x = add3_var OR x << add3_var
          ENDCASES;

  ordstruct_well_founded: AXIOM strict_well_founded?[ordstruct](<<);

  reduce_nat(zero?_fun: nat, nonzero?_fun: [[posnat, nat, nat] -> nat]):
        [ordstruct -> nat] =
      LAMBDA (ordstruct_adtvar: ordstruct):
        LET red: [ordstruct -> nat] = reduce_nat(zero?_fun, nonzero?_fun)
          IN
          CASES ordstruct_adtvar
            OF zero: zero?_fun,
               add(add1_var, add2_var, add3_var):
                 nonzero?_fun(add1_var, red(add2_var), red(add3_var))
            ENDCASES;

  REDUCE_nat(zero?_fun: [ordstruct -> nat],
             nonzero?_fun: [[posnat, nat, nat, ordstruct] -> nat]):
        [ordstruct -> nat] =
      LAMBDA (ordstruct_adtvar: ordstruct):
        LET red: [ordstruct -> nat] = REDUCE_nat(zero?_fun, nonzero?_fun)
          IN
          CASES ordstruct_adtvar
            OF zero: zero?_fun(ordstruct_adtvar),
               add(add1_var, add2_var, add3_var):
                 nonzero?_fun(add1_var, red(add2_var), red(add3_var),
                              ordstruct_adtvar)
            ENDCASES;
 END ordstruct_adt

ordstruct_adt_reduce[range: TYPE]: THEORY
 BEGIN

  IMPORTING ordstruct_adt

  reduce(zero?_fun: range,
         nonzero?_fun: [[posnat, range, range] -> range]):
        [ordstruct -> range] =
      LAMBDA (ordstruct_adtvar: ordstruct):
        LET red: [ordstruct -> range] = reduce(zero?_fun, nonzero?_fun) IN
          CASES ordstruct_adtvar
            OF zero: zero?_fun,
               add(add1_var, add2_var, add3_var):
                 nonzero?_fun(add1_var, red(add2_var), red(add3_var))
            ENDCASES;

  REDUCE(zero?_fun: [ordstruct -> range],
         nonzero?_fun: [[posnat, range, range, ordstruct] -> range]):
        [ordstruct -> range] =
      LAMBDA (ordstruct_adtvar: ordstruct):
        LET red: [ordstruct -> range] = REDUCE(zero?_fun, nonzero?_fun) IN
          CASES ordstruct_adtvar
            OF zero: zero?_fun(ordstruct_adtvar),
               add(add1_var, add2_var, add3_var):
                 nonzero?_fun(add1_var, red(add2_var), red(add3_var),
                              ordstruct_adtvar)
            ENDCASES;
 END ordstruct_adt_reduce