/**
 * In this file there are the implementations
 * of the fuctions declared in fmu.h
 * along with the data needed.
 */
#include "fmu.h"
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <unistd.h>
#include <signal.h>
#include <locale.h>
#include "libwebsockets.h"

#define TRUE    1
#define FALSE   0
#define SUCCESS 1
#define FAIL    0

/**
 * variables for the websocket
 */
int port = 0;
int initial_port = 8084;
int websocket_open = FALSE;
struct lws_context* context;
enum lws_callback_reasons callback_reason;
void* callback_in;
struct lws* callback_wsi;
int force_exit = 0;
char lwssendstate[LWS_SEND_BUFFER_PRE_PADDING + LWS_SEND_BUFFER_POST_PADDING+128];
char lwssendvariables[LWS_SEND_BUFFER_PRE_PADDING + LWS_SEND_BUFFER_POST_PADDING+128];

/**
 * variables for pvsio communication
 */
const struct lconv* loc = localeconv();
char sendbuff[1000];
char state[2000];
char variables[2000];
char tempstate[2000];
char banner[20000];
char receivebuff[1000];
char r5[1000];
char r1[1000];
char r2[1000];
char r3[1000];
char r4[1000];
char r0[1000];
int ret;
int index_state;
int index_state1;
int index_state2;
int FtS[2];         // Father to Son
int StF[2];         // Son to Father
int pid_of_son;
int first = 0;

double temp1,temp2;
FILE* fd;
extern FmiBuffer fmiBuffer;

/**
 * functions for websocket copied from the pacemaker example
 */
void sighandler(int sig) { force_exit = 1; }

/**
 * this is the callback function where we handle messages received from a PVSio-web user interface prototype
 */
static int WebSocketCallback(struct lws* wsi, enum lws_callback_reasons reason, void* user, void* in, size_t len) {
    /* global vars */
    callback_reason = reason;
    callback_in = in;
    callback_wsi = wsi;

    /* Callback */
    switch (callback_reason) {
    case LWS_CALLBACK_ESTABLISHED:
        printf("LWS_CALLBACK_ESTABLISHED\n");
        printf("**********************************************\n");
        printf("***              (FMI 2.0 Protocol)       ****\n");
        printf("**********************************************\n");
        break;
    case LWS_CALLBACK_CLOSED:
        printf("CLIENT DISCONNECTED!\n\n");
        break;
    case LWS_CALLBACK_RECEIVE:
        /**
         * we MUST handle messages from the websocket and answer back
         * From the websocket we receive a string that is forwarded to PVSio
         * with the function sendToPVS
         * then we compose a message to the client appending some information to the state
         * */
        printf("LWS_CALLBACK_RECEIVE\n");
        //printf("Received message: %s\n", (char*) in);
        sendToPVS((char*) in);
        strcpy(tempstate,state);
        memset(variables,0,2000); // we need to clean the variables before reusing them
        sprintf(variables,";(#{{#each variables}}{{#if fmi}} {{name}} := {{fmi.printf_type}}{{#unless @last}},{{/unless}} {{/if}}{{/each}}#)\n",
            {{#each variables}}{{#if fmi}}fmiBuffer.{{fmi.buffer_name}}[{{fmi.valueReference}}]{{#unless @last}},
            {{/unless}}{{/if}}{{/each}}
        );
        strcat(tempstate, variables);
        memcpy(lwssendstate + LWS_SEND_BUFFER_PRE_PADDING, tempstate, strlen(tempstate));
        lws_write(wsi, (unsigned char *)lwssendstate + LWS_SEND_BUFFER_PRE_PADDING, strlen(tempstate), LWS_WRITE_TEXT);
        break;
    case LWS_CALLBACK_HTTP:
        printf("LWS_CALLBACK_HTTP\n");
        break;
    case LWS_CALLBACK_LOCK_POLL:
        printf("LWS_CALLBACK_LOCK_POLL\n");
        break;
    case LWS_CALLBACK_ADD_POLL_FD:
        printf("LWS_CALLBACK_ADD_POLL_FD\n");
        break;
    case LWS_CALLBACK_UNLOCK_POLL:
        printf("LWS_CALLBACK_UNLOCK_POLL\n");
        break;
    case LWS_CALLBACK_PROTOCOL_INIT:
        printf("LWS_CALLBACK_PROTOCOL_INIT\n");
        break;
    case LWS_CALLBACK_GET_THREAD_ID:
        printf("TIMEOUT\n");
        printf("LWS_CALLBACK_GET_THREAD_ID\n");
        break;
    case LWS_CALLBACK_WSI_DESTROY:
        printf("Timeout Happened %i\n", callback_reason);
        break;
    default:
        printf("Unmanaged Callback Reason! %i\n", callback_reason);
        break;
    }
    return 0;
}

/* list of supported protocols and callbacks */
static struct lws_protocols protocols[] = {
    {
        "FMI",              /* name */
        WebSocketCallback,  /* callback */
        0,                  /* per_session_data_size */
        0,                  /* max frame size / rx buffer */
    },
    {
        NULL, NULL, 0, 0   /* End of list */
    }
};

/* create websocket context */
int open_websocket() {
    const char *interface = NULL; /* NULL means
                                     "all interfaces" */
    lwsl_notice("libwebsockets test server - "
                "(C) Copyright 2010-2013 Andy Green <andy@warmcat.com> - "
                "licensed under LGPL2.1\n");
    struct lws_context_creation_info info;
    memset(&info, 0, sizeof(info));
    info.port = port;
    info.iface = interface;
    info.protocols = protocols;
    info.ssl_cert_filepath = NULL;
    info.ssl_private_key_filepath = NULL;
    info.gid = -1;
    info.uid = -1;
    info.options = 0;
    context = lws_create_context(&info);  /* global var */
    if (context == NULL) {
        printf("libwebsocket init failed\n");
        return FALSE;
    }
    printf("open_websocket on port %i\n", port);
    return TRUE;
}

int WebsocketServer(/* input variables */
                    /* output variables */) {
    // Open Websocket
    if (websocket_open == FALSE) {
        port = initial_port;
        websocket_open = open_websocket();
        if (websocket_open == FALSE) {
            initial_port++; /* change port so that a new port
                            can be tried at the next attempt */
        } else {
            printf("WEBSOCKET OPENED\n");
            signal(SIGINT, sighandler);   /* handle user interrupts */
        }
        printf("RETURNING PORT %i\n", port);
        return port;
    } else {
        int repeat = TRUE;
        while (repeat) {   /* iterate until connection established */
            if (!force_exit) {
                /* wait for incoming msg, up to 100 ms */
                lws_service(context, 0);
                repeat = FALSE;
            } else {
                close_websocket();
                repeat = FALSE;
            }
        } /* END while */
        // printf("BLOCK END\n");
        return port;
    }
}

void close_websocket() {
    lws_context_destroy(context);
    websocket_open = FALSE;
    printf("close_websocket\n");
}


/**
 * /param location is the URL path of the directory where resources folder has been unzipped
 * in order to start the pvsio process
 * we need to know the path where the folder resources/
 * has been placed and we need to guarantee the permission of execution
 * The pvsio process is launched with the stdin and stdout redirected
 * on the FtS and FsT pipes
 * and the initial banner is removed from the read buffer
 * */
void initialize(const char* location) {
    char a[100];
    char b[100];
    char c[100];
    char e[100];
    char f[200];
    //printf("%s\n",location);
    strcpy(a, location);
    strcat(a,"/");
    strcpy(b, location);
    strcat(b,"/");
    strcpy(c, location);
    strcat(c,"/");
    strcpy(e,c);
    strcat(c, "PVS6.0");
    strcat(a,"pvsio");
    /**
     * we MUST provide the name of the PVS theory
     * in this case LFRController.pvs
     * */
    strcat(b,"{{name}}.pvs");
    strcpy(e,c);
    strcat(e,"/bin/relocate");
    // these istructions remove the "file://" part of the string
    ////////////////////////////////////////////////////////
    char* as = a;
    char* bs = b;
    char* cs = c;
    char* ds = e;
    ds= ds+5;
    bs= bs+5;
    as= as+5;
    cs= cs+5;
    printf("%s\n",as);
    printf("%s\n",bs);
    /////////////////////////////////////////////////////////
    char* parmList1[] = {"/bin/chmod", "+x", "-R", (char*) &location[5], NULL};

    pipe(FtS);
    pipe(StF);

    pid_of_son=fork();
    if (pid_of_son == 0){
        execvp("chmod", parmList1);
    } else{
        wait(NULL);
    }
    getcwd(f,sizeof(f));
    chdir((char*)&location[5]);
    chdir("PVS6.0/");
    sleep(1);
    system("./bin/relocate");

    sleep(0.01);
    chdir(f);
    pid_of_son = fork();
    if (pid_of_son == 0) {
        // son
        close( 0 );            //
        dup( FtS[0] );        // close stdin

        close( FtS[0] );    // replace stdin with Fts[0]
        close( FtS[1] );    //

        close ( 1 );        //
        dup( StF[1] );        // close stdout

        close( StF[1] );    // replace stdout with StF[1]
        close( StF[0] );    //

        // the process spawned by execlp will inherit the pipes
        execlp(as, "pvsio", cs , bs, NULL);
    }
    //father
    close(FtS[0]);    //    closes the unnecessary pipe extremity
    close(StF[1]);    //  closes the unnecessary pipe extremity

    sleep(1);
    read(StF[0], banner, sizeof(banner));        // removes the  banner
    fd = fdopen(StF[0], "r");
    setlocale(LC_ALL, "C");                        // needed for INTO-CPS
    sprintf(sendbuff,"init_state;");
    write(FtS[1], sendbuff,strlen(sendbuff));
    fgets(r3, sizeof(r3),fd);

    ret = fread(state,1,1,fd); //  the minimum possibile
    while(findVariable("<PVSio>", state) == -1){
        ret += fread(&state[ret],1,1,fd);
    }
    state[ret-8]='\0'; // removes PVSio prompt

    /**
     * here we MUST insert the code for setting the initial output
     * so we call the function findVariable with the name of the variable
     * declared in the PSV theory ( in some case we need to call it sequentially as in this example
     * then we call the convertStringtoDouble with the retrieved index
     * and with the number of the index in the buffer
     * ( this last index is written in ModelDescription.xml )
     * At the end we have as many call to convertStringtoDouble as the
     * number of the outputs variables
     *
     *    index_state=findVariable("motorSpeed", state);
     *    index_state1= findVariable("left", &state[index_state]);
     *    index_state2= findVariable("right", &state[index_state]);
     *    convertStringtoDouble(index_state + index_state1, 3);
     *    convertStringtoDouble(index_state + index_state2, 4);
     **/
}

/**
 * This function sends a string to and receives the answer from pvsio
 * the answer received is saved in the variable state
 */
void sendToPVS(const char* action) {
    fflush(fd);
    if (strcmp(action,"tick")==0) {
        WebsocketServer(); // we want to check the websocket only during the doStep call and avoid doing it after receiving a message
    }

    /**
     * we MUST change the state according to the input of the FMU
     * so we call the function findVariable with the name of the variable
     * declared in the PVS theory ( in some case we need to call it sequentially as in this example
     * then we call the convertDoubletoString with the retrieved index
     * and with the number of the index in the buffer
     * ( this last index is written in ModelDescription.xml )
     * At the end we have as many call to convertDoubletoString as the
     * number of the inputs variables
     * /
     *    index_state=findVariable("lightSensors",state);
     *    index_state1= findVariable("left",&state[index_state]);
     *    convertDoubletoString(index_state+index_state1,fmiBuffer.realBuffer[1],1);
     *
     *    index_state=findVariable("lightSensors",state);
     *    index_state2= findVariable("right",&state[index_state]);
     *    convertDoubletoString(index_state+index_state2,fmiBuffer.realBuffer[2],2);
     */

    sprintf(sendbuff,"%s(",action);
    strcat(sendbuff,state);
    strcat(sendbuff,");");
    memset(state,0,2000); // cleans state before using it
    write(FtS[1], sendbuff,strlen(sendbuff));

    /**
     * The following loop is used to remove the ==> symbol
     **/
    do {
        fgets(r3, sizeof(r3),fd);
    }
    while((strcmp(" ==>\n",r3)!=0) && (strcmp("==>\n",r3)!=0)); //  ";;;;;GC:;;;;;finished"  followed by "==>" without whitespace

    ret = fread(state,1,1,fd); //  the minimum possibile
    while(findVariable("<PVSio>",state) == -1){
        ret+= fread(&state[ret],1,1,fd);
    }
    state[ret-8]='\0'; // removes PVSio prompt

    /**
     * we MUST change the outputs of the FMU according to the state
     * again we use findVariable to move through the state variable
     * till the indexes we must change
     * see comment at line 359
     *
     *    index_state=findVariable("motorSpeed",state);
     *    index_state1= findVariable("left",&state[index_state]);
     *    index_state2= findVariable("right",&state[index_state]);
     *    convertStringtoDouble(index_state+index_state1,3);
     *    convertStringtoDouble(index_state+index_state2,4);
     */

}

/*
 * This function simply sends the exit command
 *  to pvsio in order to terminate it
 **/
void terminate(){
    sprintf(sendbuff,"exit;\n");
    write(FtS[1], sendbuff,strlen(sendbuff));
    close_websocket();
}

int findVariable(const char tosearch[], const char state[]){
    int tmp_index = 0;
    int success = 0;
    while(success != 1){
        if(strchr(&state[tmp_index],tosearch[0]) != NULL){
            tmp_index=strchr(&state[tmp_index],tosearch[0]) - state;
            for(unsigned int i = 1; i < strlen(tosearch); i++){
                if(state[tmp_index+i] == tosearch[i]){
                    success = 1;
                }
                else{
                    success = 0;
                    tmp_index++;
                    break;
                }
            }
        } else {
            return -1;
        }
    }
    if(tmp_index == -1) { return -1; } // not found
    return tmp_index + (strlen(tosearch)) + 4; // tmp_index points to the string we were searching, +4 is necessary for " := "
}

void convertStringtoDouble(int state_index, int buffer_index){
    temp1=0;
    temp2=0;
    if(atof(&state[state_index]) == 0){
        fmiBuffer.{{buffer_names.real}}[buffer_index] = 0;
    }
    else{
        sscanf(&state[state_index], "%[^'/']/%s %*s", r1, r2);
        temp1 = atof(r1);
        temp2 = atof(r2);

        if(strlen(r1) > 5){
            fmiBuffer.{{buffer_names.real}}[buffer_index] = temp1;
        }
        else{
            if(temp2 != 0){
                fmiBuffer.{{buffer_names.real}}[buffer_index] = temp1/temp2;
            }
            else {
                fmiBuffer.{{buffer_names.real}}[buffer_index] = temp1;
            }
        }
    }
}

/**
     * In this function we MUST write the index of the last element of PVSio
     * which is the last in alphabetical order
     *
     * * Per Paolo: PVSio riordina lo stato in ordine alfabetico,
     *  e l'ultimo elemento non ha la , alla fine ma ' '
     *  quindi va trattato diversamente
     *  Questa informazione si puo' trovare parsando la teoria
     *  e ordinando le variabili dello stato in ordine alfabetico
     *
     * */
void convertDoubletoString(int state_index,double value, int buffer_index){
    char temp[1000];
    char temp_value[20];
    int offset;
    // in this specific case the last element has index 1 so...
    if(buffer_index == 3){
        offset = strchr(&state[state_index], ' ') - &state[state_index];
        strcpy(temp, &state[state_index + offset]);
    }
    else{
        offset = strchr(&state[state_index], ',') - &state[state_index];
        strcpy(temp, &state[state_index+offset]);
    }
    state[state_index-1] = '\0';
    sprintf(temp_value, "%f", value);
    //printf("%s\n", temp_value);
    strcat(state, " ");
    strcat(state, temp_value);
    strcat(state, temp);
}
/**
 * we MUST be careful:
 * PVSio might use the exponential notation as output of a Real variable
 * but PVSio does not accept it as input, so we need to change it with
 * the following function
 *
 *  */
void convertNotation(const char name[], int buffer_index){
    index_state=findVariable(name,state);
    sscanf(&state[index_state], "%s,%*s", r2 );
    r2[strlen(r2)-1]='\0'; // removes comma
    sprintf(sendbuff, "str2real(\"%s\");\n", r2);
    write(FtS[1], sendbuff, strlen(sendbuff));
    fgets(r4, sizeof(r4), fd);
    fgets(r4, sizeof(r4), fd);
    sscanf(r4, "%[^'/']/%s", r1, r2);
    temp1 = atof(r1);
    temp2 = atof(r2);

    fgets(r4, sizeof(r4), fd);
    if(temp1 != 0) {
        convertDoubletoString(index_state,temp1/temp2,buffer_index);    // sometimes this might not be sufficient, see function convertStringtoDouble
    } else {
        convertDoubletoString(index_state,temp1,buffer_index);
    }
}
