{{#if template_description}}
%
%   Description: This template generates the PVS function for initialising the state of the system.
%                To improve legibility of the generated model, three cases are considered:
%                 - Default initialisation: the init function returns a constant record type (# var1 := v1, ..., varN := vN #)
%                 - A single init function is defined, with actions that override the default initialisation. No guards.
%                   In this case, the function is in the form LET st = (# ... #) IN st WITH [ varX := X, ... ]
%                 - Multiple init functions are defined and/or the init function has a guard.
%                   In this case, the function is in the form LET st = (# ... #) IN COND c1 -> st WITH [ varX := X, ... ] ... ENDCOND
%                A flag in this template (full_coverage) enables the introduction of the ELSE case in COND-ENDCOND. This is useful for
%                safer evaluation of the PVS functions in PVSio (which produces a random evaluation if the actual value of a function argument
%                is not covered by any case in the COND-ENDCOND construct.) With the full_coverage flag enabled, however, the typechecker
%                won't be able to check coverage of conditions.
%
{{/if}}{{#if comment}}  %-- {{comment}}{{/if}}
{{#if DEFAULT_INIT}}  {{name}}{{#if args}}({{#each args}}{{name}}: {{type}}{{/each}}){{/if}}: State = (#{{#each variables}}
    {{name}} := {{#if children}} (#{{#each children}}
      {{name}} := {{value}}{{#unless @last}},{{/unless}}{{/each}} #){{
          else}}{{value}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}
  #){{/if
  }}{{#if INIT_WITH_OVERRIDES}}  {{name}}{{#if args}}({{#each args}}{{name}}: {{type}}{{/each}}){{/if}}: State = LET st = (#{{#each variables}}
    {{name}} := {{#if children}} (#{{#each children}}
      {{name}} := {{value}}{{#unless @last}},{{/unless}}{{/each}} #){{
          else}}{{value}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}
  #) IN st WITH [{{#each override}}{{#each actions}}
    {{variable_name}} := {{#if variable_name_l2}}{{variable_name}}(st) WITH [ {{variable_name_l2}} := {{/if}}{{override_expression}}{{#if variable_name_l2}} ]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}{{/each}}
  ]{{/if
  }}{{#if INIT_MULTI}}  {{name}}{{#if args}}({{#each args}}{{name}}: {{type}}{{/each}}){{/if}}: State = LET st = (#{{#each variables}}
    {{name}} := {{#if children}} (#{{#each children}}
      {{name}} := {{value}}{{#unless @last}},{{/unless}}{{/each}} #){{
          else}}{{value}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}
  #) IN COND{{#each override}}
  ({{cond}})
   -> st {{#if actions}}WITH [{{#each actions}}
        {{variable_name}} := {{#if variable_name_l2}}{{variable_name}}(st) WITH [ {{variable_name_l2}} := {{/if}}{{override_expression}}{{#if variable_name_l2}} ]{{/if}}{{#unless @last}}, {{/unless}}{{/each}} ]{{#unless @last}}, {{/unless}}{{/if}}{{/each}}{{#if full_coverage}},
  ELSE -> st{{/if}}
  ENDCOND{{/if}}
