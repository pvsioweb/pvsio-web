{{&descriptor}}
{{#each importings}}
{{&.}}{{/each}}
{{#if states}}
/** 
 * Enumeration of state labels.
 */
typedef enum {
    {{#each states~}}{{name}}{{#unless @last}},{{/unless}}{{/each}}
} MachineState;{{/if}}

{{~#if constants}}
/** 
 * constants variables 
 */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
extern const {{type}} {{name}};{{/each}}
{{~/if}}
 
/**
 * Structure containing labelled states and variables
 */
typedef struct{ {{#each structureVar}}
    {{&.}}{{/each}}
{{~#if input_variables}}
    //input variables
{{~#each input_variables}}
    {{type}} {{name}};{{/each}}{{~/if}}{{~#if output_variables}}
    //output variables
{{~#each output_variables}}
    {{type}} {{name}};{{/each}}{{~/if}}
} state;

{{#if transitions}}/** 'Enter' auxiliary function.
 *    \param newStateLabel label to update the current state.
 *    \param st state structure pointer
 *    \return void
 *    \sa leave()
 */
void enter(const MachineState newStateLabel, state *st);
/** 'Leave' auxiliary function.
 *    \param currentStateLabel label to update the previous state.
 *    \param st state structure pointer
 *    \return void
 *    \sa enter()
 */
void leave(const MachineState currentStateLabel, state *st);{{/if}}

{{#if initial_transitions}}/** Initialiser.
 *    \param st state structure pointer
 *    \return state structure
 */
state init(state *st);{{/if}}
{{#if transitions}}{{#each transitions}}
{{#if id}}/** {{id}} transition function.
 *    It changes state from "{{source.name}}" to "{{target.name}}"{{~#if condition}} when condition [{{&condition}}] holds{{~/if}}.
 *    \param st state structure pointer
 *    \return state structure
 *    \pre function is called from the right state ("{{source.name}}" in this case)
 *    \post function is moving to the right state ("{{target.name}}" in this case)
 */
state {{id}}(state *st);{{else}}/** {{0.id}} transition function.
 * This function is generated merging two or more triggers with the same name.
 *    It changes state{{~#each .}} from "{{source.name}}" to "{{target.name}}"{{~#if condition}} when condition [{{&condition}}] holds{{~/if}}{{#unless @last}},{{/unless}}
 *
 *    {{/each}}
 *    \param st state structure pointer
 *    \return state structure
 *    \pre function is called from the right state ({{#each 0.listSources}}"{{&.}}" {{#unless @last}}or {{/unless}}{{/each}}in this case)
 *    \post function is moving to the right state ({{#each 0.listTargets}}"{{&.}}" {{#unless @last}}or {{/unless}}{{/each}}in this case)
 */
state {{0.id}}(state *st);{{/if}}
{{/each}}{{/if}}
{{#if transitions}}
{{#each transitions}}{{#if id}}/** {{id}} permission function for transition.
 * Use to check if functions can be performed, it controls if the current state is eligible.
 * (i.e., current state is "{{source.name}}")
 *    \param st state structure pointer
 *    \return boolean
 */
UC_8 per_{{id}}(const state *st);{{else}}/** {{0.id}} permission function for transition.
 * Use to check if functions can be performed, it controls if the current state is eligible.
 * (i.e., current state is {{#each 0.listSources}}"{{&.}}"{{#unless @last}} or {{/unless}}{{/each}})
 *    \param st state structure pointer
 *    \return boolean
 */
UC_8 per_{{0.id}}(const state *st);{{/if}}

{{/each}}{{/if}}
{{&disclaimer}}
