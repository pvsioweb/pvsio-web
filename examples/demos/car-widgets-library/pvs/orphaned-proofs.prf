("main" main break_TCC4 0 (break_TCC4-1 nil 3698143006 ("" (subtype-tcc) nil nil) ((getBrk const-decl "Speed_Val" main nil) (MAX_SPEED const-decl "real" main nil)) nil))("main" main break_TCC3 0 (break_TCC3-1 nil 3698143006 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (Speed_Val type-eq-decl nil main nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (getBrk const-decl "Speed_Val" main nil) (MAX_SPEED const-decl "real" main nil)) nil))("main" main break_TCC2 0 (break_TCC2-1 nil 3698143006 ("" (subtype-tcc) nil nil) ((getBrk const-decl "Speed_Val" main nil) (MAX_SPEED const-decl "real" main nil)) nil))("main" main break_TCC1 0 (break_TCC1-1 nil 3698143006 ("" (grind) (("" (all-typepreds) (("" (assert) nil nil)) nil)) nil) ((>= const-decl "bool" reals nil) (total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (even? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (state type-eq-decl nil main nil) (Temp type-eq-decl nil main nil) (Speed type-eq-decl nil main nil) (Shift type-decl nil main nil) (Rpm type-eq-decl nil main nil) (Odo type-eq-decl nil main nil) (strict_total_order? const-decl "bool" orders nil) (< const-decl "bool" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (Speed_Val type-eq-decl nil main nil) (MAX_SPEED const-decl "real" main nil) (getBrk const-decl "Speed_Val" main nil)) nil))("main" main getBrk_TCC1 0 (getBrk_TCC1-1 nil 3698142844 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (MAX_SPEED const-decl "real" main nil)) nil))("main" main tick_TCC2 0 (tick_TCC2-1 nil 3698143523 ("" (subtype-tcc) nil nil) ((FRICTION const-decl "Speed_Val" main nil) (MAX_SPEED const-decl "real" main nil)) nil))("main" main getAcc_TCC17 0 (getAcc_TCC17-1 nil 3698156924 ("" (cond-coverage-tcc) nil nil) nil nil))("main" main getAcc_TCC16 0 (getAcc_TCC16-1 nil 3698156924 ("" (cond-disjoint-tcc) nil nil) nil nil))("main" main getAcc_TCC15 0 (getAcc_TCC15-1 nil 3698156924 ("" (subtype-tcc) nil nil) ((MAX_SPEED const-decl "real" main nil)) nil))("main" main getAcc_TCC14 0 (getAcc_TCC14-1 nil 3698156924 ("" (subtype-tcc) nil nil) ((MAX_ODO const-decl "real" main nil)) nil))("main" main getAcc_TCC13 0 (getAcc_TCC13-1 nil 3698156924 ("" (subtype-tcc) nil nil) ((MAX_SPEED const-decl "real" main nil)) nil))("main" main getAcc_TCC12 0 (getAcc_TCC12-1 nil 3698156924 ("" (subtype-tcc) nil nil) ((MAX_ODO const-decl "real" main nil)) nil))("main" main getAcc_TCC11 0 (getAcc_TCC11-1 nil 3698156924 ("" (subtype-tcc) nil nil) ((MAX_SPEED const-decl "real" main nil)) nil))("main" main getAcc_TCC10 0 (getAcc_TCC10-1 nil 3698142844 ("" (cond-coverage-tcc) nil nil) ((MAX_ODO const-decl "real" main nil)) nil))("main" main brake_TCC5 0 (brake_TCC5-1 nil 3698156924 ("" (grind) (("1" (all-typepreds) (("1" (assert) nil nil)) nil) ("2" (all-typepreds) (("2" (assert) nil nil)) nil) ("3" (all-typepreds) (("3" (assert) nil nil)) nil) ("4" (all-typepreds) (("4" (assert) nil nil)) nil)) nil) ((< const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (<= const-decl "bool" reals nil) (total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (MAX_SPEED const-decl "real" main nil) (state type-eq-decl nil main nil) (Temp type-eq-decl nil main nil) (Speed type-eq-decl nil main nil) (Shift type-decl nil main nil) (Rpm type-eq-decl nil main nil) (Odo type-eq-decl nil main nil) (Action type-decl nil main nil) (>= const-decl "bool" reals nil) (even? const-decl "bool" integers nil) (strict_total_order? const-decl "bool" orders nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (MAX_ODO const-decl "real" main nil) (getBrk const-decl "[# speed: real, odo: real #]" main nil)) nil))("main" main inc_TCC4 0 (inc_TCC4-1 nil 3699250834 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (Odo type-eq-decl nil main nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (MAX_ODO const-decl "real" main nil)) nil))