(basal_profiles
 (EMPTY_PROFILES_TCC1 0
  (EMPTY_PROFILES_TCC1-1 nil 3719914022 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (EMPTY_DB const-decl "list[basal_profile]" basal_profiles nil)
    (INVALID_INDEX const-decl "int" basal_profiles nil))
   nil))
 (EMPTY_PROFILES_TCC2 0
  (EMPTY_PROFILES_TCC2-1 nil 3719916871 ("" (subtype-tcc) nil nil)
   ((EMPTY_DB const-decl "list[basal_profile]" basal_profiles nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (STANDARD_PROFILES_TCC1 0
  (STANDARD_PROFILES_TCC1-1 nil 3719916871 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (STANDARD_PROFILES_TCC2 0
  (STANDARD_PROFILES_TCC2-1 nil 3719916871 ("" (grind) nil nil)
   ((INVALID_INDEX const-decl "int" basal_profiles nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   nil))
 (STANDARD_PROFILES_TCC3 0
  (STANDARD_PROFILES_TCC3-1 nil 3719916871 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (STANDARD_PROFILES_TCC4 0
  (STANDARD_PROFILES_TCC4-1 nil 3719924835 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (get_profile_TCC1 0
  (get_profile_TCC1-1 nil 3719914398 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (time type-eq-decl nil basal_profiles nil)
    (string type-eq-decl nil strings nil)
    (basal_profile type-eq-decl nil basal_profiles nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (INVALID_INDEX const-decl "int" basal_profiles nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (basal_profiles type-eq-decl nil basal_profiles nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))

