(main
 (init_TCC1 0
  (init_TCC1-1 nil 3705346664 ("" (subtype-tcc) nil nil)
   ((MAX_DISP2 const-decl "posnat" main nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC2 0
  (init_TCC2-1 nil 3706185671 ("" (subtype-tcc) nil nil)
   ((MAX_DISP3 const-decl "posnat" main nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC3 0
  (init_TCC3-1 nil 3707293135 ("" (subtype-tcc) nil nil)
   ((MAX_LEN2 const-decl "posnat" main nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_shift_left_TCC1 0
  (click_shift_left_TCC1-1 nil 3707293135 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_LEN1 const-decl "posnat" main nil)
    (MAX_LEN2 const-decl "posnat" main nil))
   nil))
 (click_shift_right_TCC1 0
  (click_shift_right_TCC1-1 nil 3707244995
   ("" (skosimp*) (("" (all-typepreds) (("" (assert) nil nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (MAX_LEN2 const-decl "posnat" main nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MAX_DISP3 const-decl "posnat" main nil)
    (MAX_DISP2 const-decl "posnat" main nil)
    (MAX_LEN1 const-decl "posnat" main nil)
    (state type-eq-decl nil main nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Display type-eq-decl nil display nil)
    (strict_total_order? const-decl "bool" orders nil))
   nil))
 (click_mul_TCC1 0
  (click_mul_TCC1-1 nil 3707244995 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_DISP3 const-decl "posnat" main nil)
    (MAX_DISP2 const-decl "posnat" main nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (click_sub_TCC1 0
  (click_sub_TCC1-1 nil 3707245105
   ("" (skosimp*) (("" (all-typepreds) (("" (assert) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (MAX_LEN1 const-decl "posnat" main nil)
    (Display type-eq-decl nil display nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (MAX_DISP2 const-decl "posnat" main nil)
    (MAX_DISP3 const-decl "posnat" main nil)
    (MAX_LEN2 const-decl "posnat" main nil)
    (state type-eq-decl nil main nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (divides const-decl "bool" divides nil)
    (<= const-decl "bool" reals nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)))

