(main
 (gear2real_TCC1 0
  (gear2real_TCC1-1 nil 3699250669 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (gear2real_TCC2 0
  (gear2real_TCC2-1 nil 3699250669 ("" (cond-coverage-tcc) nil nil) nil
   nil))
 (init_TCC1 0
  (init_TCC1-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_ODO const-decl "real" main nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC2 0
  (init_TCC2-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_RPM const-decl "real" main nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC3 0
  (init_TCC3-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (init_TCC4 0
  (init_TCC4-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getRPM_TCC1 0
  (getRPM_TCC1-1 nil 3699250669 ("" (subtype-tcc) nil nil)
   ((tyre const-decl "real" main nil)) nil))
 (getRPM_TCC2 0
  (getRPM_TCC2-1 nil 3699250669 ("" (subtype-tcc) nil nil)
   ((MAX_RPM const-decl "real" main nil)
    (tyre const-decl "real" main nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (getRPM_TCC3 0
  (getRPM_TCC3-1 nil 3699250669 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MAX_RPM const-decl "real" main nil)
    (tyre const-decl "real" main nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (getRPM_TCC4 0
  (getRPM_TCC4-1 nil 3699250669 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tyre const-decl "real" main nil)
    (MAX_RPM const-decl "real" main nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (getAcc_TCC1 0
  (getAcc_TCC1-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC2 0
  (getAcc_TCC2-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC3 0
  (getAcc_TCC3-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC4 0
  (getAcc_TCC4-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC5 0
  (getAcc_TCC5-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC6 0
  (getAcc_TCC6-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC7 0
  (getAcc_TCC7-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC8 0
  (getAcc_TCC8-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (getAcc_TCC9 0
  (getAcc_TCC9-1 nil 3698142844 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (gearUP_TCC1 0
  (gearUP_TCC1-1 nil 3699250669 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (gearDOWN_TCC1 0
  (gearDOWN_TCC1-1 nil 3699250669 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (accelerate_TCC1 0
  (accelerate_TCC1-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Speed_Val type-eq-decl nil main nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (accelerate_TCC2 0
  (accelerate_TCC2-1 nil 3698142844 ("" (subtype-tcc) nil nil)
   ((MAX_SPEED const-decl "real" main nil)) nil))
 (brake_TCC1 0
  (brake_TCC1-1 nil 3698145588
   ("" (grind) (("" (all-typepreds) (("" (assert) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (<= const-decl "bool" reals nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (odd? const-decl "bool" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil) (state type-eq-decl nil main nil)
    (Temp type-eq-decl nil main nil) (Speed type-eq-decl nil main nil)
    (Rpm type-eq-decl nil main nil) (Odo type-eq-decl nil main nil)
    (Gear type-decl nil main nil) (Action type-decl nil main nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_SPEED const-decl "real" main nil)
    (getBrk const-decl "[# speed: real, rpm: real #]" main nil))
   nil))
 (brake_TCC2 0
  (brake_TCC2-1 nil 3698145588 ("" (subtype-tcc) nil nil)
   ((getBrk const-decl "[# speed: real, rpm: real #]" main nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (brake_TCC3 0
  (brake_TCC3-1 nil 3698145588 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getBrk const-decl "[# speed: real, rpm: real #]" main nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (brake_TCC4 0
  (brake_TCC4-1 nil 3698145588 ("" (subtype-tcc) nil nil)
   ((getBrk const-decl "[# speed: real, rpm: real #]" main nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (FRICTION_TCC1 0
  (FRICTION_TCC1-1 nil 3698143523 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (MAX_SPEED const-decl "real" main nil))
   nil))
 (inc_TCC1 0
  (inc_TCC1-1 nil 3699250834 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (Odo type-eq-decl nil main nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (MAX_ODO const-decl "real" main nil))
   nil))
 (inc_TCC2 0
  (inc_TCC2-1 nil 3699250834
   ("" (skosimp*)
    (("" (grind) (("" (all-typepreds) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (MAX_ODO const-decl "real" main nil)
    (Speed_Unit type-decl nil main nil)
    (Speed_Val type-eq-decl nil main nil)
    (Speed type-eq-decl nil main nil)
    (MAX_SPEED const-decl "real" main nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (Odo type-eq-decl nil main nil)
    (> const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (inc_TCC3 0
  (inc_TCC3-1 nil 3699250834 ("" (subtype-tcc) nil nil)
   ((MAX_ODO const-decl "real" main nil)) nil))
 (inc_TCC4 0
  (inc_TCC4-1 nil 3699250834 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (Odo type-eq-decl nil main nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (MAX_ODO const-decl "real" main nil))
   nil))
 (tick_TCC1 0
  (tick_TCC1-1 nil 3698143523
   ("" (grind) (("" (all-typepreds) (("" (assert) nil nil)) nil)) nil)
   ((> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (<= const-decl "bool" reals nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (>= const-decl "bool" reals nil)
    (strict_total_order? const-decl "bool" orders nil)
    (state type-eq-decl nil main nil) (Temp type-eq-decl nil main nil)
    (Speed type-eq-decl nil main nil) (Rpm type-eq-decl nil main nil)
    (Odo type-eq-decl nil main nil) (Gear type-decl nil main nil)
    (Action type-decl nil main nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (MAX_SPEED const-decl "real" main nil)
    (FRICTION const-decl "Speed_Val" main nil))
   nil)))
